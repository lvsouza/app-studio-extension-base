{"version":3,"file":"index.cjs.js","sources":["../__vite-browser-external","../node_modules/workerpool/dist/workerpool.js","../src/lib/ExtensionBase.ts"],"sourcesContent":["export default {}","/**\n * workerpool.js\n * https://github.com/josdejong/workerpool\n *\n * Offload tasks to a pool of workers on node.js and in the browser.\n *\n * @version 9.2.0\n * @date    2024-10-11\n *\n * @license\n * Copyright (C) 2014-2022 Jos de Jong <wjosdejong@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.workerpool = {}));\n})(this, (function (exports) { 'use strict';\n\n  var src = {};\n\n  var environment = {exports: {}};\n\n  (function (module) {\n    // source: https://github.com/flexdinesh/browser-or-node\n    // source: https://github.com/mozilla/pdf.js/blob/7ea0e40e588864cd938d1836ec61f1928d3877d3/src/shared/util.js#L24\n    var isNode = function isNode(nodeProcess) {\n      return typeof nodeProcess !== 'undefined' && nodeProcess.versions != null && nodeProcess.versions.node != null && nodeProcess + '' === '[object process]';\n    };\n    module.exports.isNode = isNode;\n\n    // determines the JavaScript platform: browser or node\n    module.exports.platform = typeof process !== 'undefined' && isNode(process) ? 'node' : 'browser';\n\n    // determines whether the code is running in main thread or not\n    // note that in node.js we have to check both worker_thread and child_process\n    var worker_threads = module.exports.platform === 'node' && require('worker_threads');\n    module.exports.isMainThread = module.exports.platform === 'node' ? (!worker_threads || worker_threads.isMainThread) && !process.connected : typeof Window !== 'undefined';\n\n    // determines the number of cpus available\n    module.exports.cpus = module.exports.platform === 'browser' ? self.navigator.hardwareConcurrency : require('os').cpus().length;\n  })(environment);\n  var environmentExports = environment.exports;\n\n  var _Promise$1 = {};\n\n  var hasRequired_Promise;\n  function require_Promise() {\n    if (hasRequired_Promise) return _Promise$1;\n    hasRequired_Promise = 1;\n\n    /**\n     * Promise\n     *\n     * Inspired by https://gist.github.com/RubaXa/8501359 from RubaXa <trash@rubaxa.org>\n     * @template T\n     * @template [E=Error]\n     * @param {Function} handler   Called as handler(resolve: Function, reject: Function)\n     * @param {Promise} [parent]   Parent promise for propagation of cancel and timeout\n     */\n    function Promise(handler, parent) {\n      var me = this;\n      if (!(this instanceof Promise)) {\n        throw new SyntaxError('Constructor must be called with the new operator');\n      }\n      if (typeof handler !== 'function') {\n        throw new SyntaxError('Function parameter handler(resolve, reject) missing');\n      }\n      var _onSuccess = [];\n      var _onFail = [];\n\n      // status\n      /**\n       * @readonly\n       */\n      this.resolved = false;\n      /**\n       * @readonly\n       */\n      this.rejected = false;\n      /**\n       * @readonly\n       */\n      this.pending = true;\n\n      /**\n       * Process onSuccess and onFail callbacks: add them to the queue.\n       * Once the promise is resolved, the function _promise is replace.\n       * @param {Function} onSuccess\n       * @param {Function} onFail\n       * @private\n       */\n      var _process = function _process(onSuccess, onFail) {\n        _onSuccess.push(onSuccess);\n        _onFail.push(onFail);\n      };\n\n      /**\n       * Add an onSuccess callback and optionally an onFail callback to the Promise\n       * @template TT\n       * @template [TE=never]\n       * @param {(r: T) => TT | PromiseLike<TT>} onSuccess\n       * @param {(r: E) => TE | PromiseLike<TE>} [onFail]\n       * @returns {Promise<TT | TE, any>} promise\n       */\n      this.then = function (onSuccess, onFail) {\n        return new Promise(function (resolve, reject) {\n          var s = onSuccess ? _then(onSuccess, resolve, reject) : resolve;\n          var f = onFail ? _then(onFail, resolve, reject) : reject;\n          _process(s, f);\n        }, me);\n      };\n\n      /**\n       * Resolve the promise\n       * @param {*} result\n       * @type {Function}\n       */\n      var _resolve2 = function _resolve(result) {\n        // update status\n        me.resolved = true;\n        me.rejected = false;\n        me.pending = false;\n        _onSuccess.forEach(function (fn) {\n          fn(result);\n        });\n        _process = function _process(onSuccess, onFail) {\n          onSuccess(result);\n        };\n        _resolve2 = _reject2 = function _reject() {};\n        return me;\n      };\n\n      /**\n       * Reject the promise\n       * @param {Error} error\n       * @type {Function}\n       */\n      var _reject2 = function _reject(error) {\n        // update status\n        me.resolved = false;\n        me.rejected = true;\n        me.pending = false;\n        _onFail.forEach(function (fn) {\n          fn(error);\n        });\n        _process = function _process(onSuccess, onFail) {\n          onFail(error);\n        };\n        _resolve2 = _reject2 = function _reject() {};\n        return me;\n      };\n\n      /**\n       * Cancel the promise. This will reject the promise with a CancellationError\n       * @returns {this} self\n       */\n      this.cancel = function () {\n        if (parent) {\n          parent.cancel();\n        } else {\n          _reject2(new CancellationError());\n        }\n        return me;\n      };\n\n      /**\n       * Set a timeout for the promise. If the promise is not resolved within\n       * the time, the promise will be cancelled and a TimeoutError is thrown.\n       * If the promise is resolved in time, the timeout is removed.\n       * @param {number} delay     Delay in milliseconds\n       * @returns {this} self\n       */\n      this.timeout = function (delay) {\n        if (parent) {\n          parent.timeout(delay);\n        } else {\n          var timer = setTimeout(function () {\n            _reject2(new TimeoutError('Promise timed out after ' + delay + ' ms'));\n          }, delay);\n          me.always(function () {\n            clearTimeout(timer);\n          });\n        }\n        return me;\n      };\n\n      // attach handler passing the resolve and reject functions\n      handler(function (result) {\n        _resolve2(result);\n      }, function (error) {\n        _reject2(error);\n      });\n    }\n\n    /**\n     * Execute given callback, then call resolve/reject based on the returned result\n     * @param {Function} callback\n     * @param {Function} resolve\n     * @param {Function} reject\n     * @returns {Function}\n     * @private\n     */\n    function _then(callback, resolve, reject) {\n      return function (result) {\n        try {\n          var res = callback(result);\n          if (res && typeof res.then === 'function' && typeof res['catch'] === 'function') {\n            // method returned a promise\n            res.then(resolve, reject);\n          } else {\n            resolve(res);\n          }\n        } catch (error) {\n          reject(error);\n        }\n      };\n    }\n\n    /**\n     * Add an onFail callback to the Promise\n     * @template TT\n     * @param {(error: E) => TT | PromiseLike<TT>} onFail\n     * @returns {Promise<T | TT>} promise\n     */\n    Promise.prototype['catch'] = function (onFail) {\n      return this.then(null, onFail);\n    };\n\n    // TODO: add support for Promise.catch(Error, callback)\n    // TODO: add support for Promise.catch(Error, Error, callback)\n\n    /**\n     * Execute given callback when the promise either resolves or rejects.\n     * @template TT\n     * @param {() => Promise<TT>} fn\n     * @returns {Promise<TT>} promise\n     */\n    Promise.prototype.always = function (fn) {\n      return this.then(fn, fn);\n    };\n\n    /**\n      * Execute given callback when the promise either resolves or rejects.\n      * Same semantics as Node's Promise.finally()\n      * @param {Function} fn\n      * @returns {Promise} promise\n      */\n    Promise.prototype.finally = function (fn) {\n      var me = this;\n      var final = function final() {\n        return new Promise(function (resolve) {\n          return resolve();\n        }).then(fn).then(function () {\n          return me;\n        });\n      };\n      return this.then(final, final);\n    };\n\n    /**\n     * Create a promise which resolves when all provided promises are resolved,\n     * and fails when any of the promises resolves.\n     * @param {Promise[]} promises\n     * @returns {Promise<any[], any>} promise\n     */\n    Promise.all = function (promises) {\n      return new Promise(function (resolve, reject) {\n        var remaining = promises.length,\n          results = [];\n        if (remaining) {\n          promises.forEach(function (p, i) {\n            p.then(function (result) {\n              results[i] = result;\n              remaining--;\n              if (remaining == 0) {\n                resolve(results);\n              }\n            }, function (error) {\n              remaining = 0;\n              reject(error);\n            });\n          });\n        } else {\n          resolve(results);\n        }\n      });\n    };\n\n    /**\n     * Create a promise resolver\n     * @returns {{promise: Promise, resolve: Function, reject: Function}} resolver\n     */\n    Promise.defer = function () {\n      var resolver = {};\n      resolver.promise = new Promise(function (resolve, reject) {\n        resolver.resolve = resolve;\n        resolver.reject = reject;\n      });\n      return resolver;\n    };\n\n    /**\n     * Create a cancellation error\n     * @param {String} [message]\n     * @extends Error\n     */\n    function CancellationError(message) {\n      this.message = message || 'promise cancelled';\n      this.stack = new Error().stack;\n    }\n    CancellationError.prototype = new Error();\n    CancellationError.prototype.constructor = Error;\n    CancellationError.prototype.name = 'CancellationError';\n    Promise.CancellationError = CancellationError;\n\n    /**\n     * Create a timeout error\n     * @param {String} [message]\n     * @extends Error\n     */\n    function TimeoutError(message) {\n      this.message = message || 'timeout exceeded';\n      this.stack = new Error().stack;\n    }\n    TimeoutError.prototype = new Error();\n    TimeoutError.prototype.constructor = Error;\n    TimeoutError.prototype.name = 'TimeoutError';\n    Promise.TimeoutError = TimeoutError;\n    _Promise$1.Promise = Promise;\n    return _Promise$1;\n  }\n\n  function _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n    return n;\n  }\n  function _createForOfIteratorHelper(r, e) {\n    var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (!t) {\n      if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {\n        t && (r = t);\n        var n = 0,\n          F = function () {};\n        return {\n          s: F,\n          n: function () {\n            return n >= r.length ? {\n              done: !0\n            } : {\n              done: !1,\n              value: r[n++]\n            };\n          },\n          e: function (r) {\n            throw r;\n          },\n          f: F\n        };\n      }\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var o,\n      a = !0,\n      u = !1;\n    return {\n      s: function () {\n        t = t.call(r);\n      },\n      n: function () {\n        var r = t.next();\n        return a = r.done, r;\n      },\n      e: function (r) {\n        u = !0, o = r;\n      },\n      f: function () {\n        try {\n          a || null == t.return || t.return();\n        } finally {\n          if (u) throw o;\n        }\n      }\n    };\n  }\n  function _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n      value: t,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[r] = t, e;\n  }\n  function ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n      var o = Object.getOwnPropertySymbols(e);\n      r && (o = o.filter(function (r) {\n        return Object.getOwnPropertyDescriptor(e, r).enumerable;\n      })), t.push.apply(t, o);\n    }\n    return t;\n  }\n  function _objectSpread2(e) {\n    for (var r = 1; r < arguments.length; r++) {\n      var t = null != arguments[r] ? arguments[r] : {};\n      r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n        _defineProperty(e, r, t[r]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n      });\n    }\n    return e;\n  }\n  function _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n      var i = e.call(t, r || \"default\");\n      if (\"object\" != typeof i) return i;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n  }\n  function _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n  }\n  function _typeof(o) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n      return typeof o;\n    } : function (o) {\n      return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n  }\n  function _unsupportedIterableToArray(r, a) {\n    if (r) {\n      if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n      var t = {}.toString.call(r).slice(8, -1);\n      return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n  }\n\n  var WorkerHandler = {exports: {}};\n\n  var validateOptions = {};\n\n  /**\n   * Validate that the object only contains known option names\n   * - Throws an error when unknown options are detected\n   * - Throws an error when some of the allowed options are attached\n   * @param {Object | undefined} options\n   * @param {string[]} allowedOptionNames\n   * @param {string} objectName\n   * @retrun {Object} Returns the original options\n   */\n  var hasRequiredValidateOptions;\n  function requireValidateOptions() {\n    if (hasRequiredValidateOptions) return validateOptions;\n    hasRequiredValidateOptions = 1;\n    validateOptions.validateOptions = function validateOptions(options, allowedOptionNames, objectName) {\n      if (!options) {\n        return;\n      }\n      var optionNames = options ? Object.keys(options) : [];\n\n      // check for unknown properties\n      var unknownOptionName = optionNames.find(function (optionName) {\n        return !allowedOptionNames.includes(optionName);\n      });\n      if (unknownOptionName) {\n        throw new Error('Object \"' + objectName + '\" contains an unknown option \"' + unknownOptionName + '\"');\n      }\n\n      // check for inherited properties which are not present on the object itself\n      var illegalOptionName = allowedOptionNames.find(function (allowedOptionName) {\n        return Object.prototype[allowedOptionName] && !optionNames.includes(allowedOptionName);\n      });\n      if (illegalOptionName) {\n        throw new Error('Object \"' + objectName + '\" contains an inherited option \"' + illegalOptionName + '\" which is ' + 'not defined in the object itself but in its prototype. Only plain objects are allowed. ' + 'Please remove the option from the prototype or override it with a value \"undefined\".');\n      }\n      return options;\n    };\n\n    // source: https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker\n    validateOptions.workerOptsNames = ['credentials', 'name', 'type'];\n\n    // source: https://nodejs.org/api/child_process.html#child_processforkmodulepath-args-options\n    validateOptions.forkOptsNames = ['cwd', 'detached', 'env', 'execPath', 'execArgv', 'gid', 'serialization', 'signal', 'killSignal', 'silent', 'stdio', 'uid', 'windowsVerbatimArguments', 'timeout'];\n\n    // source: https://nodejs.org/api/worker_threads.html#new-workerfilename-options\n    validateOptions.workerThreadOptsNames = ['argv', 'env', 'eval', 'execArgv', 'stdin', 'stdout', 'stderr', 'workerData', 'trackUnmanagedFds', 'transferList', 'resourceLimits', 'name'];\n    return validateOptions;\n  }\n\n  /**\n   * embeddedWorker.js contains an embedded version of worker.js.\n   * This file is automatically generated,\n   * changes made in this file will be overwritten.\n   */\n  var embeddedWorker;\n  var hasRequiredEmbeddedWorker;\n  function requireEmbeddedWorker() {\n    if (hasRequiredEmbeddedWorker) return embeddedWorker;\n    hasRequiredEmbeddedWorker = 1;\n    embeddedWorker = \"!function(e,n){\\\"object\\\"==typeof exports&&\\\"undefined\\\"!=typeof module?module.exports=n():\\\"function\\\"==typeof define&&define.amd?define(n):(e=\\\"undefined\\\"!=typeof globalThis?globalThis:e||self).worker=n()}(this,(function(){\\\"use strict\\\";function e(n){return e=\\\"function\\\"==typeof Symbol&&\\\"symbol\\\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\\\"function\\\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\\\"symbol\\\":typeof e},e(n)}function n(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\\\"default\\\")?e.default:e}var t={};var r=function(e,n){this.message=e,this.transfer=n},o={};function i(e,n){var t=this;if(!(this instanceof i))throw new SyntaxError(\\\"Constructor must be called with the new operator\\\");if(\\\"function\\\"!=typeof e)throw new SyntaxError(\\\"Function parameter handler(resolve, reject) missing\\\");var r=[],o=[];this.resolved=!1,this.rejected=!1,this.pending=!0;var a=function(e,n){r.push(e),o.push(n)};this.then=function(e,n){return new i((function(t,r){var o=e?u(e,t,r):t,i=n?u(n,t,r):r;a(o,i)}),t)};var f=function(e){return t.resolved=!0,t.rejected=!1,t.pending=!1,r.forEach((function(n){n(e)})),a=function(n,t){n(e)},f=d=function(){},t},d=function(e){return t.resolved=!1,t.rejected=!0,t.pending=!1,o.forEach((function(n){n(e)})),a=function(n,t){t(e)},f=d=function(){},t};this.cancel=function(){return n?n.cancel():d(new s),t},this.timeout=function(e){if(n)n.timeout(e);else{var r=setTimeout((function(){d(new c(\\\"Promise timed out after \\\"+e+\\\" ms\\\"))}),e);t.always((function(){clearTimeout(r)}))}return t},e((function(e){f(e)}),(function(e){d(e)}))}function u(e,n,t){return function(r){try{var o=e(r);o&&\\\"function\\\"==typeof o.then&&\\\"function\\\"==typeof o.catch?o.then(n,t):n(o)}catch(e){t(e)}}}function s(e){this.message=e||\\\"promise cancelled\\\",this.stack=(new Error).stack}function c(e){this.message=e||\\\"timeout exceeded\\\",this.stack=(new Error).stack}return i.prototype.catch=function(e){return this.then(null,e)},i.prototype.always=function(e){return this.then(e,e)},i.prototype.finally=function(e){var n=this,t=function(){return new i((function(e){return e()})).then(e).then((function(){return n}))};return this.then(t,t)},i.all=function(e){return new i((function(n,t){var r=e.length,o=[];r?e.forEach((function(e,i){e.then((function(e){o[i]=e,0==--r&&n(o)}),(function(e){r=0,t(e)}))})):n(o)}))},i.defer=function(){var e={};return e.promise=new i((function(n,t){e.resolve=n,e.reject=t})),e},s.prototype=new Error,s.prototype.constructor=Error,s.prototype.name=\\\"CancellationError\\\",i.CancellationError=s,c.prototype=new Error,c.prototype.constructor=Error,c.prototype.name=\\\"TimeoutError\\\",i.TimeoutError=c,o.Promise=i,function(n){var t=r,i=o.Promise,u=\\\"__workerpool-cleanup__\\\",s={exit:function(){}},c={addAbortListener:function(e){s.abortListeners.push(e)},emit:s.emit};if(\\\"undefined\\\"!=typeof self&&\\\"function\\\"==typeof postMessage&&\\\"function\\\"==typeof addEventListener)s.on=function(e,n){addEventListener(e,(function(e){n(e.data)}))},s.send=function(e,n){n?postMessage(e,n):postMessage(e)};else{if(\\\"undefined\\\"==typeof process)throw new Error(\\\"Script must be executed as a worker\\\");var a;try{a=require(\\\"worker_threads\\\")}catch(n){if(\\\"object\\\"!==e(n)||null===n||\\\"MODULE_NOT_FOUND\\\"!==n.code)throw n}if(a&&null!==a.parentPort){var f=a.parentPort;s.send=f.postMessage.bind(f),s.on=f.on.bind(f),s.exit=process.exit.bind(process)}else s.on=process.on.bind(process),s.send=function(e){process.send(e)},s.on(\\\"disconnect\\\",(function(){process.exit(1)})),s.exit=process.exit.bind(process)}function d(e){return Object.getOwnPropertyNames(e).reduce((function(n,t){return Object.defineProperty(n,t,{value:e[t],enumerable:!0})}),{})}function l(e){return e&&\\\"function\\\"==typeof e.then&&\\\"function\\\"==typeof e.catch}s.methods={},s.methods.run=function(e,n){var t=new Function(\\\"return (\\\"+e+\\\").apply(this, arguments);\\\");return t.worker=c,t.apply(t,n)},s.methods.methods=function(){return Object.keys(s.methods)},s.terminationHandler=void 0,s.abortListenerTimeout=1e3,s.abortListeners=[],s.terminateAndExit=function(e){var n=function(){s.exit(e)};if(!s.terminationHandler)return n();var t=s.terminationHandler(e);return l(t)?(t.then(n,n),t):(n(),new i((function(e,n){n(new Error(\\\"Worker terminating\\\"))})))},s.cleanup=function(e){if(!s.abortListeners.length)return s.send({id:e,method:u,error:d(new Error(\\\"Worker terminating\\\"))}),new i((function(e){e()}));var n,t=s.abortListeners.map((function(e){return e()})),r=new i((function(e,t){n=setTimeout((function(){t(new Error(\\\"Timeout occured waiting for abort handler, killing worker\\\"))}),s.abortListenerTimeout)})),o=i.all(t).then((function(){clearTimeout(n),s.abortListeners.length||(s.abortListeners=[])}),(function(){clearTimeout(n),s.exit()}));return i.all([o,r]).then((function(){s.send({id:e,method:u,error:null})}),(function(n){s.send({id:e,method:u,error:n?d(n):null})}))};var p=null;s.on(\\\"message\\\",(function(e){if(\\\"__workerpool-terminate__\\\"===e)return s.terminateAndExit(0);if(e.method===u)return s.cleanup(e.id);try{var n=s.methods[e.method];if(!n)throw new Error('Unknown method \\\"'+e.method+'\\\"');p=e.id;var r=n.apply(n,e.params);l(r)?r.then((function(n){n instanceof t?s.send({id:e.id,result:n.message,error:null},n.transfer):s.send({id:e.id,result:n,error:null}),p=null})).catch((function(n){s.send({id:e.id,result:null,error:d(n)}),p=null})):(r instanceof t?s.send({id:e.id,result:r.message,error:null},r.transfer):s.send({id:e.id,result:r,error:null}),p=null)}catch(n){s.send({id:e.id,result:null,error:d(n)})}})),s.register=function(e,n){if(e)for(var t in e)e.hasOwnProperty(t)&&(s.methods[t]=e[t],s.methods[t].worker=c);n&&(s.terminationHandler=n.onTerminate,s.abortListenerTimeout=n.abortListenerTimeout||1e3),s.send(\\\"ready\\\")},s.emit=function(e){if(p){if(e instanceof t)return void s.send({id:p,isEvent:!0,payload:e.message},e.transfer);s.send({id:p,isEvent:!0,payload:e})}},n.add=s.register,n.emit=s.emit}(t),n(t)}));\\n//# sourceMappingURL=worker.min.js.map\\n\";\n    return embeddedWorker;\n  }\n\n  var hasRequiredWorkerHandler;\n  function requireWorkerHandler() {\n    if (hasRequiredWorkerHandler) return WorkerHandler.exports;\n    hasRequiredWorkerHandler = 1;\n    var _require$$ = require_Promise(),\n      Promise = _require$$.Promise;\n    var environment = environmentExports;\n    var _require$$2 = requireValidateOptions(),\n      validateOptions = _require$$2.validateOptions,\n      forkOptsNames = _require$$2.forkOptsNames,\n      workerThreadOptsNames = _require$$2.workerThreadOptsNames,\n      workerOptsNames = _require$$2.workerOptsNames;\n\n    /**\n     * Special message sent by parent which causes a child process worker to terminate itself.\n     * Not a \"message object\"; this string is the entire message.\n     */\n    var TERMINATE_METHOD_ID = '__workerpool-terminate__';\n\n    /**\n     * Special message by parent which causes a child process worker to perform cleaup\n     * steps before determining if the child process worker should be terminated.\n     */\n    var CLEANUP_METHOD_ID = '__workerpool-cleanup__';\n    function ensureWorkerThreads() {\n      var WorkerThreads = tryRequireWorkerThreads();\n      if (!WorkerThreads) {\n        throw new Error('WorkerPool: workerType = \\'thread\\' is not supported, Node >= 11.7.0 required');\n      }\n      return WorkerThreads;\n    }\n\n    // check whether Worker is supported by the browser\n    function ensureWebWorker() {\n      // Workaround for a bug in PhantomJS (Or QtWebkit): https://github.com/ariya/phantomjs/issues/14534\n      if (typeof Worker !== 'function' && ((typeof Worker === \"undefined\" ? \"undefined\" : _typeof(Worker)) !== 'object' || typeof Worker.prototype.constructor !== 'function')) {\n        throw new Error('WorkerPool: Web Workers not supported');\n      }\n    }\n    function tryRequireWorkerThreads() {\n      try {\n        return require('worker_threads');\n      } catch (error) {\n        if (_typeof(error) === 'object' && error !== null && error.code === 'MODULE_NOT_FOUND') {\n          // no worker_threads available (old version of node.js)\n          return null;\n        } else {\n          throw error;\n        }\n      }\n    }\n\n    // get the default worker script\n    function getDefaultWorker() {\n      if (environment.platform === 'browser') {\n        // test whether the browser supports all features that we need\n        if (typeof Blob === 'undefined') {\n          throw new Error('Blob not supported by the browser');\n        }\n        if (!window.URL || typeof window.URL.createObjectURL !== 'function') {\n          throw new Error('URL.createObjectURL not supported by the browser');\n        }\n\n        // use embedded worker.js\n        var blob = new Blob([requireEmbeddedWorker()], {\n          type: 'text/javascript'\n        });\n        return window.URL.createObjectURL(blob);\n      } else {\n        // use external worker.js in current directory\n        return __dirname + '/worker.js';\n      }\n    }\n    function setupWorker(script, options) {\n      if (options.workerType === 'web') {\n        // browser only\n        ensureWebWorker();\n        return setupBrowserWorker(script, options.workerOpts, Worker);\n      } else if (options.workerType === 'thread') {\n        // node.js only\n        WorkerThreads = ensureWorkerThreads();\n        return setupWorkerThreadWorker(script, WorkerThreads, options);\n      } else if (options.workerType === 'process' || !options.workerType) {\n        // node.js only\n        return setupProcessWorker(script, resolveForkOptions(options), require('child_process'));\n      } else {\n        // options.workerType === 'auto' or undefined\n        if (environment.platform === 'browser') {\n          ensureWebWorker();\n          return setupBrowserWorker(script, options.workerOpts, Worker);\n        } else {\n          // environment.platform === 'node'\n          var WorkerThreads = tryRequireWorkerThreads();\n          if (WorkerThreads) {\n            return setupWorkerThreadWorker(script, WorkerThreads, options);\n          } else {\n            return setupProcessWorker(script, resolveForkOptions(options), require('child_process'));\n          }\n        }\n      }\n    }\n    function setupBrowserWorker(script, workerOpts, Worker) {\n      // validate the options right before creating the worker (not when creating the pool)\n      validateOptions(workerOpts, workerOptsNames, 'workerOpts');\n\n      // create the web worker\n      var worker = new Worker(script, workerOpts);\n      worker.isBrowserWorker = true;\n      // add node.js API to the web worker\n      worker.on = function (event, callback) {\n        this.addEventListener(event, function (message) {\n          callback(message.data);\n        });\n      };\n      worker.send = function (message, transfer) {\n        this.postMessage(message, transfer);\n      };\n      return worker;\n    }\n    function setupWorkerThreadWorker(script, WorkerThreads, options) {\n      var _options$emitStdStrea, _options$emitStdStrea2;\n      // validate the options right before creating the worker thread (not when creating the pool)\n      validateOptions(options === null || options === void 0 ? void 0 : options.workerThreadOpts, workerThreadOptsNames, 'workerThreadOpts');\n      var worker = new WorkerThreads.Worker(script, _objectSpread2({\n        stdout: (_options$emitStdStrea = options === null || options === void 0 ? void 0 : options.emitStdStreams) !== null && _options$emitStdStrea !== void 0 ? _options$emitStdStrea : false,\n        // pipe worker.STDOUT to process.STDOUT if not requested\n        stderr: (_options$emitStdStrea2 = options === null || options === void 0 ? void 0 : options.emitStdStreams) !== null && _options$emitStdStrea2 !== void 0 ? _options$emitStdStrea2 : false\n      }, options === null || options === void 0 ? void 0 : options.workerThreadOpts));\n      worker.isWorkerThread = true;\n      worker.send = function (message, transfer) {\n        this.postMessage(message, transfer);\n      };\n      worker.kill = function () {\n        this.terminate();\n        return true;\n      };\n      worker.disconnect = function () {\n        this.terminate();\n      };\n      if (options !== null && options !== void 0 && options.emitStdStreams) {\n        worker.stdout.on('data', function (data) {\n          return worker.emit(\"stdout\", data);\n        });\n        worker.stderr.on('data', function (data) {\n          return worker.emit(\"stderr\", data);\n        });\n      }\n      return worker;\n    }\n    function setupProcessWorker(script, options, child_process) {\n      // validate the options right before creating the child process (not when creating the pool)\n      validateOptions(options.forkOpts, forkOptsNames, 'forkOpts');\n\n      // no WorkerThreads, fallback to sub-process based workers\n      var worker = child_process.fork(script, options.forkArgs, options.forkOpts);\n\n      // ignore transfer argument since it is not supported by process\n      var send = worker.send;\n      worker.send = function (message) {\n        return send.call(worker, message);\n      };\n      if (options.emitStdStreams) {\n        worker.stdout.on('data', function (data) {\n          return worker.emit(\"stdout\", data);\n        });\n        worker.stderr.on('data', function (data) {\n          return worker.emit(\"stderr\", data);\n        });\n      }\n      worker.isChildProcess = true;\n      return worker;\n    }\n\n    // add debug flags to child processes if the node inspector is active\n    function resolveForkOptions(opts) {\n      opts = opts || {};\n      var processExecArgv = process.execArgv.join(' ');\n      var inspectorActive = processExecArgv.indexOf('--inspect') !== -1;\n      var debugBrk = processExecArgv.indexOf('--debug-brk') !== -1;\n      var execArgv = [];\n      if (inspectorActive) {\n        execArgv.push('--inspect=' + opts.debugPort);\n        if (debugBrk) {\n          execArgv.push('--debug-brk');\n        }\n      }\n      process.execArgv.forEach(function (arg) {\n        if (arg.indexOf('--max-old-space-size') > -1) {\n          execArgv.push(arg);\n        }\n      });\n      return Object.assign({}, opts, {\n        forkArgs: opts.forkArgs,\n        forkOpts: Object.assign({}, opts.forkOpts, {\n          execArgv: (opts.forkOpts && opts.forkOpts.execArgv || []).concat(execArgv),\n          stdio: opts.emitStdStreams ? \"pipe\" : undefined\n        })\n      });\n    }\n\n    /**\n     * Converts a serialized error to Error\n     * @param {Object} obj Error that has been serialized and parsed to object\n     * @return {Error} The equivalent Error.\n     */\n    function objectToError(obj) {\n      var temp = new Error('');\n      var props = Object.keys(obj);\n      for (var i = 0; i < props.length; i++) {\n        temp[props[i]] = obj[props[i]];\n      }\n      return temp;\n    }\n    function handleEmittedStdPayload(handler, payload) {\n      // TODO: refactor if parallel task execution gets added\n      if (Object.keys(handler.processing).length !== 1) {\n        return;\n      }\n      var task = Object.values(handler.processing)[0];\n      if (task.options && typeof task.options.on === 'function') {\n        task.options.on(payload);\n      }\n    }\n\n    /**\n     * A WorkerHandler controls a single worker. This worker can be a child process\n     * on node.js or a WebWorker in a browser environment.\n     * @param {String} [script] If no script is provided, a default worker with a\n     *                          function run will be created.\n     * @param {import('./types.js').WorkerPoolOptions} [_options] See docs\n     * @constructor\n     */\n    function WorkerHandler$1(script, _options) {\n      var me = this;\n      var options = _options || {};\n      this.script = script || getDefaultWorker();\n      this.worker = setupWorker(this.script, options);\n      this.debugPort = options.debugPort;\n      this.forkOpts = options.forkOpts;\n      this.forkArgs = options.forkArgs;\n      this.workerOpts = options.workerOpts;\n      this.workerThreadOpts = options.workerThreadOpts;\n      this.workerTerminateTimeout = options.workerTerminateTimeout;\n\n      // The ready message is only sent if the worker.add method is called (And the default script is not used)\n      if (!script) {\n        this.worker.ready = true;\n      }\n\n      // queue for requests that are received before the worker is ready\n      this.requestQueue = [];\n      this.worker.on(\"stdout\", function (data) {\n        handleEmittedStdPayload(me, {\n          \"stdout\": data.toString()\n        });\n      });\n      this.worker.on(\"stderr\", function (data) {\n        handleEmittedStdPayload(me, {\n          \"stderr\": data.toString()\n        });\n      });\n      this.worker.on('message', function (response) {\n        if (me.terminated) {\n          return;\n        }\n        if (typeof response === 'string' && response === 'ready') {\n          me.worker.ready = true;\n          dispatchQueuedRequests();\n        } else {\n          // find the task from the processing queue, and run the tasks callback\n          var id = response.id;\n          var task = me.processing[id];\n          if (task !== undefined) {\n            if (response.isEvent) {\n              if (task.options && typeof task.options.on === 'function') {\n                task.options.on(response.payload);\n              }\n            } else {\n              // remove the task from the queue\n              delete me.processing[id];\n\n              // test if we need to terminate\n              if (me.terminating === true) {\n                // complete worker termination if all tasks are finished\n                me.terminate();\n              }\n\n              // resolve the task's promise\n              if (response.error) {\n                task.resolver.reject(objectToError(response.error));\n              } else {\n                task.resolver.resolve(response.result);\n              }\n            }\n          }\n          if (response.method === CLEANUP_METHOD_ID) {\n            var trackedTask = me.tracking[response.id];\n            if (trackedTask !== undefined) {\n              if (response.error) {\n                clearTimeout(trackedTask.timeoutId);\n                trackedTask.resolver.reject(objectToError(response.error));\n              } else {\n                me.tracking && clearTimeout(trackedTask.timeoutId);\n                trackedTask.resolver.resolve(trackedTask.result);\n              }\n            }\n            delete me.tracking[id];\n          }\n        }\n      });\n\n      // reject all running tasks on worker error\n      function onError(error) {\n        me.terminated = true;\n        for (var id in me.processing) {\n          if (me.processing[id] !== undefined) {\n            me.processing[id].resolver.reject(error);\n          }\n        }\n        me.processing = Object.create(null);\n      }\n\n      // send all queued requests to worker\n      function dispatchQueuedRequests() {\n        var _iterator = _createForOfIteratorHelper(me.requestQueue.splice(0)),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var request = _step.value;\n            me.worker.send(request.message, request.transfer);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      var worker = this.worker;\n      // listen for worker messages error and exit\n      this.worker.on('error', onError);\n      this.worker.on('exit', function (exitCode, signalCode) {\n        var message = 'Workerpool Worker terminated Unexpectedly\\n';\n        message += '    exitCode: `' + exitCode + '`\\n';\n        message += '    signalCode: `' + signalCode + '`\\n';\n        message += '    workerpool.script: `' + me.script + '`\\n';\n        message += '    spawnArgs: `' + worker.spawnargs + '`\\n';\n        message += '    spawnfile: `' + worker.spawnfile + '`\\n';\n        message += '    stdout: `' + worker.stdout + '`\\n';\n        message += '    stderr: `' + worker.stderr + '`\\n';\n        onError(new Error(message));\n      });\n      this.processing = Object.create(null); // queue with tasks currently in progress\n      this.tracking = Object.create(null); // queue with tasks being monitored for cleanup status\n      this.terminating = false;\n      this.terminated = false;\n      this.cleaning = false;\n      this.terminationHandler = null;\n      this.lastId = 0;\n    }\n\n    /**\n     * Get a list with methods available on the worker.\n     * @return {Promise.<String[], Error>} methods\n     */\n    WorkerHandler$1.prototype.methods = function () {\n      return this.exec('methods');\n    };\n\n    /**\n     * Execute a method with given parameters on the worker\n     * @param {String} method\n     * @param {Array} [params]\n     * @param {{resolve: Function, reject: Function}} [resolver]\n     * @param {import('./types.js').ExecOptions}  [options]\n     * @return {Promise.<*, Error>} result\n     */\n    WorkerHandler$1.prototype.exec = function (method, params, resolver, options) {\n      if (!resolver) {\n        resolver = Promise.defer();\n      }\n\n      // generate a unique id for the task\n      var id = ++this.lastId;\n\n      // register a new task as being in progress\n      this.processing[id] = {\n        id: id,\n        resolver: resolver,\n        options: options\n      };\n\n      // build a JSON-RPC request\n      var request = {\n        message: {\n          id: id,\n          method: method,\n          params: params\n        },\n        transfer: options && options.transfer\n      };\n      if (this.terminated) {\n        resolver.reject(new Error('Worker is terminated'));\n      } else if (this.worker.ready) {\n        // send the request to the worker\n        this.worker.send(request.message, request.transfer);\n      } else {\n        this.requestQueue.push(request);\n      }\n\n      // on cancellation, force the worker to terminate\n      var me = this;\n      return resolver.promise.catch(function (error) {\n        if (error instanceof Promise.CancellationError || error instanceof Promise.TimeoutError) {\n          me.tracking[id] = {\n            id: id,\n            resolver: Promise.defer()\n          };\n\n          // remove this task from the queue. It is already rejected (hence this\n          // catch event), and else it will be rejected again when terminating\n          delete me.processing[id];\n          me.tracking[id].resolver.promise = me.tracking[id].resolver.promise.catch(function (err) {\n            delete me.tracking[id];\n            var promise = me.terminateAndNotify(true).then(function () {\n              throw err;\n            }, function (err) {\n              throw err;\n            });\n            return promise;\n          });\n          me.worker.send({\n            id: id,\n            method: CLEANUP_METHOD_ID\n          });\n\n          /**\n            * Sets a timeout to reject the cleanup operation if the message sent to the worker\n            * does not receive a response. see worker.tryCleanup for worker cleanup operations.\n            * Here we use the workerTerminateTimeout as the worker will be terminated if the timeout does invoke.\n            * \n            * We need this timeout in either case of a Timeout or Cancellation Error as if\n            * the worker does not send a message we still need to give a window of time for a response.\n            * \n            * The workerTermniateTimeout is used here if this promise is rejected the worker cleanup\n            * operations will occure.\n          */\n          me.tracking[id].timeoutId = setTimeout(function () {\n            me.tracking[id].resolver.reject(error);\n          }, me.workerTerminateTimeout);\n          return me.tracking[id].resolver.promise;\n        } else {\n          throw error;\n        }\n      });\n    };\n\n    /**\n     * Test whether the worker is processing any tasks or cleaning up before termination.\n     * @return {boolean} Returns true if the worker is busy\n     */\n    WorkerHandler$1.prototype.busy = function () {\n      return this.cleaning || Object.keys(this.processing).length > 0;\n    };\n\n    /**\n     * Terminate the worker.\n     * @param {boolean} [force=false]   If false (default), the worker is terminated\n     *                                  after finishing all tasks currently in\n     *                                  progress. If true, the worker will be\n     *                                  terminated immediately.\n     * @param {function} [callback=null] If provided, will be called when process terminates.\n     */\n    WorkerHandler$1.prototype.terminate = function (force, callback) {\n      var me = this;\n      if (force) {\n        // cancel all tasks in progress\n        for (var id in this.processing) {\n          if (this.processing[id] !== undefined) {\n            this.processing[id].resolver.reject(new Error('Worker terminated'));\n          }\n        }\n        this.processing = Object.create(null);\n      }\n\n      // If we are terminating, cancel all tracked task for cleanup\n      for (var _i = 0, _Object$values = Object.values(me.tracking); _i < _Object$values.length; _i++) {\n        var task = _Object$values[_i];\n        clearTimeout(task.timeoutId);\n        task.resolver.reject(new Error('Worker Terminating'));\n      }\n      me.tracking = Object.create(null);\n      if (typeof callback === 'function') {\n        this.terminationHandler = callback;\n      }\n      if (!this.busy()) {\n        // all tasks are finished. kill the worker\n        var cleanup = function cleanup(err) {\n          me.terminated = true;\n          me.cleaning = false;\n          if (me.worker != null && me.worker.removeAllListeners) {\n            // removeAllListeners is only available for child_process\n            me.worker.removeAllListeners('message');\n          }\n          me.worker = null;\n          me.terminating = false;\n          if (me.terminationHandler) {\n            me.terminationHandler(err, me);\n          } else if (err) {\n            throw err;\n          }\n        };\n        if (this.worker) {\n          if (typeof this.worker.kill === 'function') {\n            if (this.worker.killed) {\n              cleanup(new Error('worker already killed!'));\n              return;\n            }\n\n            // child process and worker threads\n            var cleanExitTimeout = setTimeout(function () {\n              if (me.worker) {\n                me.worker.kill();\n              }\n            }, this.workerTerminateTimeout);\n            this.worker.once('exit', function () {\n              clearTimeout(cleanExitTimeout);\n              if (me.worker) {\n                me.worker.killed = true;\n              }\n              cleanup();\n            });\n            if (this.worker.ready) {\n              this.worker.send(TERMINATE_METHOD_ID);\n            } else {\n              this.requestQueue.push({\n                message: TERMINATE_METHOD_ID\n              });\n            }\n\n            // mark that the worker is cleaning up resources\n            // to prevent new tasks from being executed\n            this.cleaning = true;\n            return;\n          } else if (typeof this.worker.terminate === 'function') {\n            this.worker.terminate(); // web worker\n            this.worker.killed = true;\n          } else {\n            throw new Error('Failed to terminate worker');\n          }\n        }\n        cleanup();\n      } else {\n        // we can't terminate immediately, there are still tasks being executed\n        this.terminating = true;\n      }\n    };\n\n    /**\n     * Terminate the worker, returning a Promise that resolves when the termination has been done.\n     * @param {boolean} [force=false]   If false (default), the worker is terminated\n     *                                  after finishing all tasks currently in\n     *                                  progress. If true, the worker will be\n     *                                  terminated immediately.\n     * @param {number} [timeout]        If provided and non-zero, worker termination promise will be rejected\n     *                                  after timeout if worker process has not been terminated.\n     * @return {Promise.<WorkerHandler, Error>}\n     */\n    WorkerHandler$1.prototype.terminateAndNotify = function (force, timeout) {\n      var resolver = Promise.defer();\n      if (timeout) {\n        resolver.promise.timeout(timeout);\n      }\n      this.terminate(force, function (err, worker) {\n        if (err) {\n          resolver.reject(err);\n        } else {\n          resolver.resolve(worker);\n        }\n      });\n      return resolver.promise;\n    };\n    WorkerHandler.exports = WorkerHandler$1;\n    WorkerHandler.exports._tryRequireWorkerThreads = tryRequireWorkerThreads;\n    WorkerHandler.exports._setupProcessWorker = setupProcessWorker;\n    WorkerHandler.exports._setupBrowserWorker = setupBrowserWorker;\n    WorkerHandler.exports._setupWorkerThreadWorker = setupWorkerThreadWorker;\n    WorkerHandler.exports.ensureWorkerThreads = ensureWorkerThreads;\n    return WorkerHandler.exports;\n  }\n\n  var debugPortAllocator;\n  var hasRequiredDebugPortAllocator;\n  function requireDebugPortAllocator() {\n    if (hasRequiredDebugPortAllocator) return debugPortAllocator;\n    hasRequiredDebugPortAllocator = 1;\n    var MAX_PORTS = 65535;\n    debugPortAllocator = DebugPortAllocator;\n    function DebugPortAllocator() {\n      this.ports = Object.create(null);\n      this.length = 0;\n    }\n    DebugPortAllocator.prototype.nextAvailableStartingAt = function (starting) {\n      while (this.ports[starting] === true) {\n        starting++;\n      }\n      if (starting >= MAX_PORTS) {\n        throw new Error('WorkerPool debug port limit reached: ' + starting + '>= ' + MAX_PORTS);\n      }\n      this.ports[starting] = true;\n      this.length++;\n      return starting;\n    };\n    DebugPortAllocator.prototype.releasePort = function (port) {\n      delete this.ports[port];\n      this.length--;\n    };\n    return debugPortAllocator;\n  }\n\n  var Pool_1;\n  var hasRequiredPool;\n  function requirePool() {\n    if (hasRequiredPool) return Pool_1;\n    hasRequiredPool = 1;\n    var _require$$ = require_Promise(),\n      Promise = _require$$.Promise;\n    var WorkerHandler = requireWorkerHandler();\n    var environment = environmentExports;\n    var DebugPortAllocator = requireDebugPortAllocator();\n    var DEBUG_PORT_ALLOCATOR = new DebugPortAllocator();\n    /**\n     * A pool to manage workers, which can be created using the function workerpool.pool.\n     *\n     * @param {String} [script]   Optional worker script\n     * @param {import('./types.js').WorkerPoolOptions} [options]  See docs\n     * @constructor\n     */\n    function Pool(script, options) {\n      if (typeof script === 'string') {\n        /** @readonly */\n        this.script = script || null;\n      } else {\n        this.script = null;\n        options = script;\n      }\n\n      /** @private */\n      this.workers = []; // queue with all workers\n      /** @private */\n      this.tasks = []; // queue with tasks awaiting execution\n\n      options = options || {};\n\n      /** @readonly */\n      this.forkArgs = Object.freeze(options.forkArgs || []);\n      /** @readonly */\n      this.forkOpts = Object.freeze(options.forkOpts || {});\n      /** @readonly */\n      this.workerOpts = Object.freeze(options.workerOpts || {});\n      /** @readonly */\n      this.workerThreadOpts = Object.freeze(options.workerThreadOpts || {});\n      /** @private */\n      this.debugPortStart = options.debugPortStart || 43210;\n      /** @readonly @deprecated */\n      this.nodeWorker = options.nodeWorker;\n      /** @readonly\n       * @type {'auto' | 'web' | 'process' | 'thread'}\n       */\n      this.workerType = options.workerType || options.nodeWorker || 'auto';\n      /** @readonly */\n      this.maxQueueSize = options.maxQueueSize || Infinity;\n      /** @readonly */\n      this.workerTerminateTimeout = options.workerTerminateTimeout || 1000;\n\n      /** @readonly */\n      this.onCreateWorker = options.onCreateWorker || function () {\n        return null;\n      };\n      /** @readonly */\n      this.onTerminateWorker = options.onTerminateWorker || function () {\n        return null;\n      };\n\n      /** @readonly */\n      this.emitStdStreams = options.emitStdStreams || false;\n\n      // configuration\n      if (options && 'maxWorkers' in options) {\n        validateMaxWorkers(options.maxWorkers);\n        /** @readonly */\n        this.maxWorkers = options.maxWorkers;\n      } else {\n        this.maxWorkers = Math.max((environment.cpus || 4) - 1, 1);\n      }\n      if (options && 'minWorkers' in options) {\n        if (options.minWorkers === 'max') {\n          /** @readonly */\n          this.minWorkers = this.maxWorkers;\n        } else {\n          validateMinWorkers(options.minWorkers);\n          this.minWorkers = options.minWorkers;\n          this.maxWorkers = Math.max(this.minWorkers, this.maxWorkers); // in case minWorkers is higher than maxWorkers\n        }\n        this._ensureMinWorkers();\n      }\n\n      /** @private */\n      this._boundNext = this._next.bind(this);\n      if (this.workerType === 'thread') {\n        WorkerHandler.ensureWorkerThreads();\n      }\n    }\n\n    /**\n     * Execute a function on a worker.\n     *\n     * Example usage:\n     *\n     *   var pool = new Pool()\n     *\n     *   // call a function available on the worker\n     *   pool.exec('fibonacci', [6])\n     *\n     *   // offload a function\n     *   function add(a, b) {\n     *     return a + b\n     *   };\n     *   pool.exec(add, [2, 4])\n     *       .then(function (result) {\n     *         console.log(result); // outputs 6\n     *       })\n     *       .catch(function(error) {\n     *         console.log(error);\n     *       });\n     * @template { (...args: any[]) => any } T\n     * @param {String | T} method  Function name or function.\n     *                                    If `method` is a string, the corresponding\n     *                                    method on the worker will be executed\n     *                                    If `method` is a Function, the function\n     *                                    will be stringified and executed via the\n     *                                    workers built-in function `run(fn, args)`.\n     * @param {Parameters<T> | null} [params]  Function arguments applied when calling the function\n     * @param {import('./types.js').ExecOptions} [options]  Options\n     * @return {Promise<ReturnType<T>>}\n     */\n    Pool.prototype.exec = function (method, params, options) {\n      // validate type of arguments\n      if (params && !Array.isArray(params)) {\n        throw new TypeError('Array expected as argument \"params\"');\n      }\n      if (typeof method === 'string') {\n        var resolver = Promise.defer();\n        if (this.tasks.length >= this.maxQueueSize) {\n          throw new Error('Max queue size of ' + this.maxQueueSize + ' reached');\n        }\n\n        // add a new task to the queue\n        var tasks = this.tasks;\n        var task = {\n          method: method,\n          params: params,\n          resolver: resolver,\n          timeout: null,\n          options: options\n        };\n        tasks.push(task);\n\n        // replace the timeout method of the Promise with our own,\n        // which starts the timer as soon as the task is actually started\n        var originalTimeout = resolver.promise.timeout;\n        resolver.promise.timeout = function timeout(delay) {\n          if (tasks.indexOf(task) !== -1) {\n            // task is still queued -> start the timer later on\n            task.timeout = delay;\n            return resolver.promise;\n          } else {\n            // task is already being executed -> start timer immediately\n            return originalTimeout.call(resolver.promise, delay);\n          }\n        };\n\n        // trigger task execution\n        this._next();\n        return resolver.promise;\n      } else if (typeof method === 'function') {\n        // send stringified function and function arguments to worker\n        return this.exec('run', [String(method), params], options);\n      } else {\n        throw new TypeError('Function or string expected as argument \"method\"');\n      }\n    };\n\n    /**\n     * Create a proxy for current worker. Returns an object containing all\n     * methods available on the worker. All methods return promises resolving the methods result.\n     * @template { { [k: string]: (...args: any[]) => any } } T\n     * @return {Promise<import('./types.js').Proxy<T>, Error>} Returns a promise which resolves with a proxy object\n     */\n    Pool.prototype.proxy = function () {\n      if (arguments.length > 0) {\n        throw new Error('No arguments expected');\n      }\n      var pool = this;\n      return this.exec('methods').then(function (methods) {\n        var proxy = {};\n        methods.forEach(function (method) {\n          proxy[method] = function () {\n            return pool.exec(method, Array.prototype.slice.call(arguments));\n          };\n        });\n        return proxy;\n      });\n    };\n\n    /**\n     * Creates new array with the results of calling a provided callback function\n     * on every element in this array.\n     * @param {Array} array\n     * @param {function} callback  Function taking two arguments:\n     *                             `callback(currentValue, index)`\n     * @return {Promise.<Array>} Returns a promise which resolves  with an Array\n     *                           containing the results of the callback function\n     *                           executed for each of the array elements.\n     */\n    /* TODO: implement map\n    Pool.prototype.map = function (array, callback) {\n    };\n    */\n\n    /**\n     * Grab the first task from the queue, find a free worker, and assign the\n     * worker to the task.\n     * @private\n     */\n    Pool.prototype._next = function () {\n      if (this.tasks.length > 0) {\n        // there are tasks in the queue\n\n        // find an available worker\n        var worker = this._getWorker();\n        if (worker) {\n          // get the first task from the queue\n          var me = this;\n          var task = this.tasks.shift();\n\n          // check if the task is still pending (and not cancelled -> promise rejected)\n          if (task.resolver.promise.pending) {\n            // send the request to the worker\n            var promise = worker.exec(task.method, task.params, task.resolver, task.options).then(me._boundNext).catch(function () {\n              // if the worker crashed and terminated, remove it from the pool\n              if (worker.terminated) {\n                return me._removeWorker(worker);\n              }\n            }).then(function () {\n              me._next(); // trigger next task in the queue\n            });\n\n            // start queued timer now\n            if (typeof task.timeout === 'number') {\n              promise.timeout(task.timeout);\n            }\n          } else {\n            // The task taken was already complete (either rejected or resolved), so just trigger next task in the queue\n            me._next();\n          }\n        }\n      }\n    };\n\n    /**\n     * Get an available worker. If no worker is available and the maximum number\n     * of workers isn't yet reached, a new worker will be created and returned.\n     * If no worker is available and the maximum number of workers is reached,\n     * null will be returned.\n     *\n     * @return {WorkerHandler | null} worker\n     * @private\n     */\n    Pool.prototype._getWorker = function () {\n      // find a non-busy worker\n      var workers = this.workers;\n      for (var i = 0; i < workers.length; i++) {\n        var worker = workers[i];\n        if (worker.busy() === false) {\n          return worker;\n        }\n      }\n      if (workers.length < this.maxWorkers) {\n        // create a new worker\n        worker = this._createWorkerHandler();\n        workers.push(worker);\n        return worker;\n      }\n      return null;\n    };\n\n    /**\n     * Remove a worker from the pool.\n     * Attempts to terminate worker if not already terminated, and ensures the minimum\n     * pool size is met.\n     * @param {WorkerHandler} worker\n     * @return {Promise<WorkerHandler>}\n     * @private\n     */\n    Pool.prototype._removeWorker = function (worker) {\n      var me = this;\n      DEBUG_PORT_ALLOCATOR.releasePort(worker.debugPort);\n      // _removeWorker will call this, but we need it to be removed synchronously\n      this._removeWorkerFromList(worker);\n      // If minWorkers set, spin up new workers to replace the crashed ones\n      this._ensureMinWorkers();\n      // terminate the worker (if not already terminated)\n      return new Promise(function (resolve, reject) {\n        worker.terminate(false, function (err) {\n          me.onTerminateWorker({\n            forkArgs: worker.forkArgs,\n            forkOpts: worker.forkOpts,\n            workerThreadOpts: worker.workerThreadOpts,\n            script: worker.script\n          });\n          if (err) {\n            reject(err);\n          } else {\n            resolve(worker);\n          }\n        });\n      });\n    };\n\n    /**\n     * Remove a worker from the pool list.\n     * @param {WorkerHandler} worker\n     * @private\n     */\n    Pool.prototype._removeWorkerFromList = function (worker) {\n      // remove from the list with workers\n      var index = this.workers.indexOf(worker);\n      if (index !== -1) {\n        this.workers.splice(index, 1);\n      }\n    };\n\n    /**\n     * Close all active workers. Tasks currently being executed will be finished first.\n     * @param {boolean} [force=false]   If false (default), the workers are terminated\n     *                                  after finishing all tasks currently in\n     *                                  progress. If true, the workers will be\n     *                                  terminated immediately.\n     * @param {number} [timeout]        If provided and non-zero, worker termination promise will be rejected\n     *                                  after timeout if worker process has not been terminated.\n     * @return {Promise.<void, Error>}\n     */\n    Pool.prototype.terminate = function (force, timeout) {\n      var me = this;\n\n      // cancel any pending tasks\n      this.tasks.forEach(function (task) {\n        task.resolver.reject(new Error('Pool terminated'));\n      });\n      this.tasks.length = 0;\n      var f = function f(worker) {\n        DEBUG_PORT_ALLOCATOR.releasePort(worker.debugPort);\n        this._removeWorkerFromList(worker);\n      };\n      var removeWorker = f.bind(this);\n      var promises = [];\n      var workers = this.workers.slice();\n      workers.forEach(function (worker) {\n        var termPromise = worker.terminateAndNotify(force, timeout).then(removeWorker).always(function () {\n          me.onTerminateWorker({\n            forkArgs: worker.forkArgs,\n            forkOpts: worker.forkOpts,\n            workerThreadOpts: worker.workerThreadOpts,\n            script: worker.script\n          });\n        });\n        promises.push(termPromise);\n      });\n      return Promise.all(promises);\n    };\n\n    /**\n     * Retrieve statistics on tasks and workers.\n     * @return {{totalWorkers: number, busyWorkers: number, idleWorkers: number, pendingTasks: number, activeTasks: number}} Returns an object with statistics\n     */\n    Pool.prototype.stats = function () {\n      var totalWorkers = this.workers.length;\n      var busyWorkers = this.workers.filter(function (worker) {\n        return worker.busy();\n      }).length;\n      return {\n        totalWorkers: totalWorkers,\n        busyWorkers: busyWorkers,\n        idleWorkers: totalWorkers - busyWorkers,\n        pendingTasks: this.tasks.length,\n        activeTasks: busyWorkers\n      };\n    };\n\n    /**\n     * Ensures that a minimum of minWorkers is up and running\n     * @private\n     */\n    Pool.prototype._ensureMinWorkers = function () {\n      if (this.minWorkers) {\n        for (var i = this.workers.length; i < this.minWorkers; i++) {\n          this.workers.push(this._createWorkerHandler());\n        }\n      }\n    };\n\n    /**\n     * Helper function to create a new WorkerHandler and pass all options.\n     * @return {WorkerHandler}\n     * @private\n     */\n    Pool.prototype._createWorkerHandler = function () {\n      var overriddenParams = this.onCreateWorker({\n        forkArgs: this.forkArgs,\n        forkOpts: this.forkOpts,\n        workerOpts: this.workerOpts,\n        workerThreadOpts: this.workerThreadOpts,\n        script: this.script\n      }) || {};\n      return new WorkerHandler(overriddenParams.script || this.script, {\n        forkArgs: overriddenParams.forkArgs || this.forkArgs,\n        forkOpts: overriddenParams.forkOpts || this.forkOpts,\n        workerOpts: overriddenParams.workerOpts || this.workerOpts,\n        workerThreadOpts: overriddenParams.workerThreadOpts || this.workerThreadOpts,\n        debugPort: DEBUG_PORT_ALLOCATOR.nextAvailableStartingAt(this.debugPortStart),\n        workerType: this.workerType,\n        workerTerminateTimeout: this.workerTerminateTimeout,\n        emitStdStreams: this.emitStdStreams\n      });\n    };\n\n    /**\n     * Ensure that the maxWorkers option is an integer >= 1\n     * @param {*} maxWorkers\n     * @returns {boolean} returns true maxWorkers has a valid value\n     */\n    function validateMaxWorkers(maxWorkers) {\n      if (!isNumber(maxWorkers) || !isInteger(maxWorkers) || maxWorkers < 1) {\n        throw new TypeError('Option maxWorkers must be an integer number >= 1');\n      }\n    }\n\n    /**\n     * Ensure that the minWorkers option is an integer >= 0\n     * @param {*} minWorkers\n     * @returns {boolean} returns true when minWorkers has a valid value\n     */\n    function validateMinWorkers(minWorkers) {\n      if (!isNumber(minWorkers) || !isInteger(minWorkers) || minWorkers < 0) {\n        throw new TypeError('Option minWorkers must be an integer number >= 0');\n      }\n    }\n\n    /**\n     * Test whether a variable is a number\n     * @param {*} value\n     * @returns {boolean} returns true when value is a number\n     */\n    function isNumber(value) {\n      return typeof value === 'number';\n    }\n\n    /**\n     * Test whether a number is an integer\n     * @param {number} value\n     * @returns {boolean} Returns true if value is an integer\n     */\n    function isInteger(value) {\n      return Math.round(value) == value;\n    }\n    Pool_1 = Pool;\n    return Pool_1;\n  }\n\n  var worker$1 = {};\n\n  /**\n   * The helper class for transferring data from the worker to the main thread.\n   *\n   * @param {Object} message The object to deliver to the main thread.\n   * @param {Object[]} transfer An array of transferable Objects to transfer ownership of.\n   */\n  var transfer;\n  var hasRequiredTransfer;\n  function requireTransfer() {\n    if (hasRequiredTransfer) return transfer;\n    hasRequiredTransfer = 1;\n    function Transfer(message, transfer) {\n      this.message = message;\n      this.transfer = transfer;\n    }\n    transfer = Transfer;\n    return transfer;\n  }\n\n  var hasRequiredWorker;\n  function requireWorker() {\n    if (hasRequiredWorker) return worker$1;\n    hasRequiredWorker = 1;\n    (function (exports) {\n      var Transfer = requireTransfer();\n\n      /**\n       * worker must handle async cleanup handlers. Use custom Promise implementation. \n      */\n      var Promise = require_Promise().Promise;\n      /**\n       * Special message sent by parent which causes the worker to terminate itself.\n       * Not a \"message object\"; this string is the entire message.\n       */\n      var TERMINATE_METHOD_ID = '__workerpool-terminate__';\n\n      /**\n       * Special message by parent which causes a child process worker to perform cleaup\n       * steps before determining if the child process worker should be terminated.\n      */\n      var CLEANUP_METHOD_ID = '__workerpool-cleanup__';\n      // var nodeOSPlatform = require('./environment').nodeOSPlatform;\n\n      var TIMEOUT_DEFAULT = 1000;\n\n      // create a worker API for sending and receiving messages which works both on\n      // node.js and in the browser\n      var worker = {\n        exit: function exit() {}\n      };\n\n      // api for in worker communication with parent process\n      // works in both node.js and the browser\n      var publicWorker = {\n        /**\n         * \n         * @param {() => Promise<void>} listener \n         */\n        addAbortListener: function addAbortListener(listener) {\n          worker.abortListeners.push(listener);\n        },\n        emit: worker.emit\n      };\n      if (typeof self !== 'undefined' && typeof postMessage === 'function' && typeof addEventListener === 'function') {\n        // worker in the browser\n        worker.on = function (event, callback) {\n          addEventListener(event, function (message) {\n            callback(message.data);\n          });\n        };\n        worker.send = function (message, transfer) {\n          transfer ? postMessage(message, transfer) : postMessage(message);\n        };\n      } else if (typeof process !== 'undefined') {\n        // node.js\n\n        var WorkerThreads;\n        try {\n          WorkerThreads = require('worker_threads');\n        } catch (error) {\n          if (_typeof(error) === 'object' && error !== null && error.code === 'MODULE_NOT_FOUND') ; else {\n            throw error;\n          }\n        }\n        if (WorkerThreads && /* if there is a parentPort, we are in a WorkerThread */\n        WorkerThreads.parentPort !== null) {\n          var parentPort = WorkerThreads.parentPort;\n          worker.send = parentPort.postMessage.bind(parentPort);\n          worker.on = parentPort.on.bind(parentPort);\n          worker.exit = process.exit.bind(process);\n        } else {\n          worker.on = process.on.bind(process);\n          // ignore transfer argument since it is not supported by process\n          worker.send = function (message) {\n            process.send(message);\n          };\n          // register disconnect handler only for subprocess worker to exit when parent is killed unexpectedly\n          worker.on('disconnect', function () {\n            process.exit(1);\n          });\n          worker.exit = process.exit.bind(process);\n        }\n      } else {\n        throw new Error('Script must be executed as a worker');\n      }\n      function convertError(error) {\n        return Object.getOwnPropertyNames(error).reduce(function (product, name) {\n          return Object.defineProperty(product, name, {\n            value: error[name],\n            enumerable: true\n          });\n        }, {});\n      }\n\n      /**\n       * Test whether a value is a Promise via duck typing.\n       * @param {*} value\n       * @returns {boolean} Returns true when given value is an object\n       *                    having functions `then` and `catch`.\n       */\n      function isPromise(value) {\n        return value && typeof value.then === 'function' && typeof value.catch === 'function';\n      }\n\n      // functions available externally\n      worker.methods = {};\n\n      /**\n       * Execute a function with provided arguments\n       * @param {String} fn     Stringified function\n       * @param {Array} [args]  Function arguments\n       * @returns {*}\n       */\n      worker.methods.run = function run(fn, args) {\n        var f = new Function('return (' + fn + ').apply(this, arguments);');\n        f.worker = publicWorker;\n        return f.apply(f, args);\n      };\n\n      /**\n       * Get a list with methods available on this worker\n       * @return {String[]} methods\n       */\n      worker.methods.methods = function methods() {\n        return Object.keys(worker.methods);\n      };\n\n      /**\n       * Custom handler for when the worker is terminated.\n       */\n      worker.terminationHandler = undefined;\n      worker.abortListenerTimeout = TIMEOUT_DEFAULT;\n\n      /**\n       * Abort handlers for resolving errors which may cause a timeout or cancellation\n       * to occur from a worker context\n       */\n      worker.abortListeners = [];\n\n      /**\n       * Cleanup and exit the worker.\n       * @param {Number} code \n       * @returns {Promise<void>}\n       */\n      worker.terminateAndExit = function (code) {\n        var _exit = function _exit() {\n          worker.exit(code);\n        };\n        if (!worker.terminationHandler) {\n          return _exit();\n        }\n        var result = worker.terminationHandler(code);\n        if (isPromise(result)) {\n          result.then(_exit, _exit);\n          return result;\n        } else {\n          _exit();\n          return new Promise(function (_resolve, reject) {\n            reject(new Error(\"Worker terminating\"));\n          });\n        }\n      };\n\n      /**\n        * Called within the worker message handler to run abort handlers if registered to perform cleanup operations.\n        * @param {Integer} [requestId] id of task which is currently executing in the worker\n        * @return {Promise<void>}\n      */\n      worker.cleanup = function (requestId) {\n        if (!worker.abortListeners.length) {\n          worker.send({\n            id: requestId,\n            method: CLEANUP_METHOD_ID,\n            error: convertError(new Error('Worker terminating'))\n          });\n\n          // If there are no handlers registered, reject the promise with an error as we want the handler to be notified\n          // that cleanup should begin and the handler should be GCed.\n          return new Promise(function (resolve) {\n            resolve();\n          });\n        }\n        var _exit = function _exit() {\n          worker.exit();\n        };\n        var _abort = function _abort() {\n          if (!worker.abortListeners.length) {\n            worker.abortListeners = [];\n          }\n        };\n        var promises = worker.abortListeners.map(function (listener) {\n          return listener();\n        });\n        var timerId;\n        var timeoutPromise = new Promise(function (_resolve, reject) {\n          timerId = setTimeout(function () {\n            reject(new Error('Timeout occured waiting for abort handler, killing worker'));\n          }, worker.abortListenerTimeout);\n        });\n\n        // Once a promise settles we need to clear the timeout to prevet fulfulling the promise twice \n        var settlePromise = Promise.all(promises).then(function () {\n          clearTimeout(timerId);\n          _abort();\n        }, function () {\n          clearTimeout(timerId);\n          _exit();\n        });\n\n        // Returns a promise which will result in one of the following cases\n        // - Resolve once all handlers resolve\n        // - Reject if one or more handlers exceed the 'abortListenerTimeout' interval\n        // - Reject if one or more handlers reject\n        // Upon one of the above cases a message will be sent to the handler with the result of the handler execution\n        // which will either kill the worker if the result contains an error, or \n        return Promise.all([settlePromise, timeoutPromise]).then(function () {\n          worker.send({\n            id: requestId,\n            method: CLEANUP_METHOD_ID,\n            error: null\n          });\n        }, function (err) {\n          worker.send({\n            id: requestId,\n            method: CLEANUP_METHOD_ID,\n            error: err ? convertError(err) : null\n          });\n        });\n      };\n      var currentRequestId = null;\n      worker.on('message', function (request) {\n        if (request === TERMINATE_METHOD_ID) {\n          return worker.terminateAndExit(0);\n        }\n        if (request.method === CLEANUP_METHOD_ID) {\n          return worker.cleanup(request.id);\n        }\n        try {\n          var method = worker.methods[request.method];\n          if (method) {\n            currentRequestId = request.id;\n\n            // execute the function\n            var result = method.apply(method, request.params);\n            if (isPromise(result)) {\n              // promise returned, resolve this and then return\n              result.then(function (result) {\n                if (result instanceof Transfer) {\n                  worker.send({\n                    id: request.id,\n                    result: result.message,\n                    error: null\n                  }, result.transfer);\n                } else {\n                  worker.send({\n                    id: request.id,\n                    result: result,\n                    error: null\n                  });\n                }\n                currentRequestId = null;\n              }).catch(function (err) {\n                worker.send({\n                  id: request.id,\n                  result: null,\n                  error: convertError(err)\n                });\n                currentRequestId = null;\n              });\n            } else {\n              // immediate result\n              if (result instanceof Transfer) {\n                worker.send({\n                  id: request.id,\n                  result: result.message,\n                  error: null\n                }, result.transfer);\n              } else {\n                worker.send({\n                  id: request.id,\n                  result: result,\n                  error: null\n                });\n              }\n              currentRequestId = null;\n            }\n          } else {\n            throw new Error('Unknown method \"' + request.method + '\"');\n          }\n        } catch (err) {\n          worker.send({\n            id: request.id,\n            result: null,\n            error: convertError(err)\n          });\n        }\n      });\n\n      /**\n       * Register methods to the worker\n       * @param {Object} [methods]\n       * @param {import('./types.js').WorkerRegisterOptions} [options]\n       */\n      worker.register = function (methods, options) {\n        if (methods) {\n          for (var name in methods) {\n            if (methods.hasOwnProperty(name)) {\n              worker.methods[name] = methods[name];\n              worker.methods[name].worker = publicWorker;\n            }\n          }\n        }\n        if (options) {\n          worker.terminationHandler = options.onTerminate;\n          // register listener timeout or default to 1 second\n          worker.abortListenerTimeout = options.abortListenerTimeout || TIMEOUT_DEFAULT;\n        }\n        worker.send('ready');\n      };\n      worker.emit = function (payload) {\n        if (currentRequestId) {\n          if (payload instanceof Transfer) {\n            worker.send({\n              id: currentRequestId,\n              isEvent: true,\n              payload: payload.message\n            }, payload.transfer);\n            return;\n          }\n          worker.send({\n            id: currentRequestId,\n            isEvent: true,\n            payload: payload\n          });\n        }\n      };\n      {\n        exports.add = worker.register;\n        exports.emit = worker.emit;\n      }\n    })(worker$1);\n    return worker$1;\n  }\n\n  var platform = environmentExports.platform,\n    isMainThread = environmentExports.isMainThread,\n    cpus = environmentExports.cpus;\n\n  /** @typedef {import(\"./Pool\")} Pool */\n  /** @typedef {import(\"./types.js\").WorkerPoolOptions} WorkerPoolOptions */\n  /** @typedef {import(\"./types.js\").WorkerRegisterOptions} WorkerRegisterOptions */\n\n  /**\n   * @template { { [k: string]: (...args: any[]) => any } } T\n   * @typedef {import('./types.js').Proxy<T>} Proxy<T>\n   */\n\n  /**\n   * @overload\n   * Create a new worker pool\n   * @param {WorkerPoolOptions} [script]\n   * @returns {Pool} pool\n   */\n  /**\n   * @overload\n   * Create a new worker pool\n   * @param {string} [script]\n   * @param {WorkerPoolOptions} [options]\n   * @returns {Pool} pool\n   */\n  function pool(script, options) {\n    var Pool = requirePool();\n    return new Pool(script, options);\n  }\n  var pool_1 = src.pool = pool;\n\n  /**\n   * Create a worker and optionally register a set of methods to the worker.\n   * @param {{ [k: string]: (...args: any[]) => any }} [methods]\n   * @param {WorkerRegisterOptions} [options]\n   */\n  function worker(methods, options) {\n    var worker = requireWorker();\n    worker.add(methods, options);\n  }\n  var worker_1 = src.worker = worker;\n\n  /**\n   * Sends an event to the parent worker pool.\n   * @param {any} payload \n   */\n  function workerEmit(payload) {\n    var worker = requireWorker();\n    worker.emit(payload);\n  }\n  var workerEmit_1 = src.workerEmit = workerEmit;\n  var _require$$ = require_Promise(),\n    Promise$1 = _require$$.Promise;\n  var _Promise = src.Promise = Promise$1;\n  var Transfer = src.Transfer = requireTransfer();\n  var platform_1 = src.platform = platform;\n  var isMainThread_1 = src.isMainThread = isMainThread;\n  var cpus_1 = src.cpus = cpus;\n\n  exports.Promise = _Promise;\n  exports.Transfer = Transfer;\n  exports.cpus = cpus_1;\n  exports.default = src;\n  exports.isMainThread = isMainThread_1;\n  exports.platform = platform_1;\n  exports.pool = pool_1;\n  exports.worker = worker_1;\n  exports.workerEmit = workerEmit_1;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=workerpool.js.map\n","import workerpool from 'workerpool';\r\n\r\nimport { IPlatformAction } from './PlatformAction';\r\n\r\n\r\nexport abstract class ExtensionBase {\r\n  public platformActions: IPlatformAction[] = [];\r\n\r\n\r\n  constructor() {\r\n    workerpool.worker({\r\n      activate: this.activate.bind(this),\r\n      deactivate: this.deactivate.bind(this),\r\n      platformActions: this._platformActions.bind(this),\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Método chamado automaticamente ao ativar a extensão.\r\n   * Pode ser sobrescrito pelas classes derivadas.\r\n   */\r\n  activate(): void {\r\n    console.log('Extensão ativada (método base).');\r\n  }\r\n\r\n  /**\r\n   * Método chamado automaticamente ao desativar a extensão.\r\n   * Pode ser sobrescrito pelas classes derivadas.\r\n   */\r\n  deactivate(): void {\r\n    console.log('Extensão desativada (método base).');\r\n  }\r\n\r\n\r\n  private _platformActions(key: string): void {\r\n    this.platformActions.forEach(platformAction => platformAction.key === key ? platformAction.action() : {});\r\n  }\r\n}\r\n"],"names":["__viteBrowserExternal","global","factory","exports","this","src","environment","module","isNode","nodeProcess","worker_threads","require$$0","require$$1","environmentExports","_Promise$1","hasRequired_Promise","require_Promise","Promise","handler","parent","me","_onSuccess","_onFail","_process","onSuccess","onFail","resolve","reject","s","_then","f","_resolve2","result","fn","_reject2","error","CancellationError","delay","timer","TimeoutError","callback","res","final","promises","remaining","results","p","i","resolver","message","_arrayLikeToArray","r","a","e","n","_createForOfIteratorHelper","t","_unsupportedIterableToArray","F","o","u","_defineProperty","_toPropertyKey","ownKeys","_objectSpread2","_toPrimitive","_typeof","WorkerHandler","validateOptions","hasRequiredValidateOptions","requireValidateOptions","options","allowedOptionNames","objectName","optionNames","unknownOptionName","optionName","illegalOptionName","allowedOptionName","embeddedWorker","hasRequiredEmbeddedWorker","requireEmbeddedWorker","hasRequiredWorkerHandler","requireWorkerHandler","_require$$","_require$$2","forkOptsNames","workerThreadOptsNames","workerOptsNames","TERMINATE_METHOD_ID","CLEANUP_METHOD_ID","ensureWorkerThreads","WorkerThreads","tryRequireWorkerThreads","ensureWebWorker","getDefaultWorker","blob","setupWorker","script","setupBrowserWorker","setupWorkerThreadWorker","setupProcessWorker","resolveForkOptions","require$$2","workerOpts","Worker","worker","event","transfer","_options$emitStdStrea","_options$emitStdStrea2","data","child_process","send","opts","processExecArgv","inspectorActive","debugBrk","execArgv","arg","objectToError","obj","temp","props","handleEmittedStdPayload","payload","task","WorkerHandler$1","_options","response","dispatchQueuedRequests","id","trackedTask","onError","_iterator","_step","request","err","exitCode","signalCode","method","params","promise","force","_i","_Object$values","cleanup","cleanExitTimeout","timeout","debugPortAllocator","hasRequiredDebugPortAllocator","requireDebugPortAllocator","MAX_PORTS","DebugPortAllocator","starting","port","Pool_1","hasRequiredPool","requirePool","DEBUG_PORT_ALLOCATOR","Pool","validateMaxWorkers","validateMinWorkers","tasks","originalTimeout","pool","methods","proxy","workers","index","removeWorker","termPromise","totalWorkers","busyWorkers","overriddenParams","maxWorkers","isNumber","isInteger","minWorkers","value","worker$1","hasRequiredTransfer","requireTransfer","Transfer","hasRequiredWorker","requireWorker","TIMEOUT_DEFAULT","publicWorker","listener","parentPort","convertError","product","name","isPromise","args","code","_exit","_resolve","requestId","_abort","timerId","timeoutPromise","settlePromise","currentRequestId","platform","isMainThread","cpus","pool_1","worker_1","workerEmit","workerEmit_1","Promise$1","_Promise","platform_1","isMainThread_1","cpus_1","ExtensionBase","workerpool","key","platformAction"],"mappings":"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","x_google_ignoreList":[1]}