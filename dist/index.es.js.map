{"version":3,"file":"index.es.js","sources":["../__vite-browser-external","../node_modules/workerpool/dist/workerpool.js","../src/lib/ExtensionBase.ts"],"sourcesContent":["export default {}","/**\n * workerpool.js\n * https://github.com/josdejong/workerpool\n *\n * Offload tasks to a pool of workers on node.js and in the browser.\n *\n * @version 9.2.0\n * @date    2024-10-11\n *\n * @license\n * Copyright (C) 2014-2022 Jos de Jong <wjosdejong@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.workerpool = {}));\n})(this, (function (exports) { 'use strict';\n\n  var src = {};\n\n  var environment = {exports: {}};\n\n  (function (module) {\n    // source: https://github.com/flexdinesh/browser-or-node\n    // source: https://github.com/mozilla/pdf.js/blob/7ea0e40e588864cd938d1836ec61f1928d3877d3/src/shared/util.js#L24\n    var isNode = function isNode(nodeProcess) {\n      return typeof nodeProcess !== 'undefined' && nodeProcess.versions != null && nodeProcess.versions.node != null && nodeProcess + '' === '[object process]';\n    };\n    module.exports.isNode = isNode;\n\n    // determines the JavaScript platform: browser or node\n    module.exports.platform = typeof process !== 'undefined' && isNode(process) ? 'node' : 'browser';\n\n    // determines whether the code is running in main thread or not\n    // note that in node.js we have to check both worker_thread and child_process\n    var worker_threads = module.exports.platform === 'node' && require('worker_threads');\n    module.exports.isMainThread = module.exports.platform === 'node' ? (!worker_threads || worker_threads.isMainThread) && !process.connected : typeof Window !== 'undefined';\n\n    // determines the number of cpus available\n    module.exports.cpus = module.exports.platform === 'browser' ? self.navigator.hardwareConcurrency : require('os').cpus().length;\n  })(environment);\n  var environmentExports = environment.exports;\n\n  var _Promise$1 = {};\n\n  var hasRequired_Promise;\n  function require_Promise() {\n    if (hasRequired_Promise) return _Promise$1;\n    hasRequired_Promise = 1;\n\n    /**\n     * Promise\n     *\n     * Inspired by https://gist.github.com/RubaXa/8501359 from RubaXa <trash@rubaxa.org>\n     * @template T\n     * @template [E=Error]\n     * @param {Function} handler   Called as handler(resolve: Function, reject: Function)\n     * @param {Promise} [parent]   Parent promise for propagation of cancel and timeout\n     */\n    function Promise(handler, parent) {\n      var me = this;\n      if (!(this instanceof Promise)) {\n        throw new SyntaxError('Constructor must be called with the new operator');\n      }\n      if (typeof handler !== 'function') {\n        throw new SyntaxError('Function parameter handler(resolve, reject) missing');\n      }\n      var _onSuccess = [];\n      var _onFail = [];\n\n      // status\n      /**\n       * @readonly\n       */\n      this.resolved = false;\n      /**\n       * @readonly\n       */\n      this.rejected = false;\n      /**\n       * @readonly\n       */\n      this.pending = true;\n\n      /**\n       * Process onSuccess and onFail callbacks: add them to the queue.\n       * Once the promise is resolved, the function _promise is replace.\n       * @param {Function} onSuccess\n       * @param {Function} onFail\n       * @private\n       */\n      var _process = function _process(onSuccess, onFail) {\n        _onSuccess.push(onSuccess);\n        _onFail.push(onFail);\n      };\n\n      /**\n       * Add an onSuccess callback and optionally an onFail callback to the Promise\n       * @template TT\n       * @template [TE=never]\n       * @param {(r: T) => TT | PromiseLike<TT>} onSuccess\n       * @param {(r: E) => TE | PromiseLike<TE>} [onFail]\n       * @returns {Promise<TT | TE, any>} promise\n       */\n      this.then = function (onSuccess, onFail) {\n        return new Promise(function (resolve, reject) {\n          var s = onSuccess ? _then(onSuccess, resolve, reject) : resolve;\n          var f = onFail ? _then(onFail, resolve, reject) : reject;\n          _process(s, f);\n        }, me);\n      };\n\n      /**\n       * Resolve the promise\n       * @param {*} result\n       * @type {Function}\n       */\n      var _resolve2 = function _resolve(result) {\n        // update status\n        me.resolved = true;\n        me.rejected = false;\n        me.pending = false;\n        _onSuccess.forEach(function (fn) {\n          fn(result);\n        });\n        _process = function _process(onSuccess, onFail) {\n          onSuccess(result);\n        };\n        _resolve2 = _reject2 = function _reject() {};\n        return me;\n      };\n\n      /**\n       * Reject the promise\n       * @param {Error} error\n       * @type {Function}\n       */\n      var _reject2 = function _reject(error) {\n        // update status\n        me.resolved = false;\n        me.rejected = true;\n        me.pending = false;\n        _onFail.forEach(function (fn) {\n          fn(error);\n        });\n        _process = function _process(onSuccess, onFail) {\n          onFail(error);\n        };\n        _resolve2 = _reject2 = function _reject() {};\n        return me;\n      };\n\n      /**\n       * Cancel the promise. This will reject the promise with a CancellationError\n       * @returns {this} self\n       */\n      this.cancel = function () {\n        if (parent) {\n          parent.cancel();\n        } else {\n          _reject2(new CancellationError());\n        }\n        return me;\n      };\n\n      /**\n       * Set a timeout for the promise. If the promise is not resolved within\n       * the time, the promise will be cancelled and a TimeoutError is thrown.\n       * If the promise is resolved in time, the timeout is removed.\n       * @param {number} delay     Delay in milliseconds\n       * @returns {this} self\n       */\n      this.timeout = function (delay) {\n        if (parent) {\n          parent.timeout(delay);\n        } else {\n          var timer = setTimeout(function () {\n            _reject2(new TimeoutError('Promise timed out after ' + delay + ' ms'));\n          }, delay);\n          me.always(function () {\n            clearTimeout(timer);\n          });\n        }\n        return me;\n      };\n\n      // attach handler passing the resolve and reject functions\n      handler(function (result) {\n        _resolve2(result);\n      }, function (error) {\n        _reject2(error);\n      });\n    }\n\n    /**\n     * Execute given callback, then call resolve/reject based on the returned result\n     * @param {Function} callback\n     * @param {Function} resolve\n     * @param {Function} reject\n     * @returns {Function}\n     * @private\n     */\n    function _then(callback, resolve, reject) {\n      return function (result) {\n        try {\n          var res = callback(result);\n          if (res && typeof res.then === 'function' && typeof res['catch'] === 'function') {\n            // method returned a promise\n            res.then(resolve, reject);\n          } else {\n            resolve(res);\n          }\n        } catch (error) {\n          reject(error);\n        }\n      };\n    }\n\n    /**\n     * Add an onFail callback to the Promise\n     * @template TT\n     * @param {(error: E) => TT | PromiseLike<TT>} onFail\n     * @returns {Promise<T | TT>} promise\n     */\n    Promise.prototype['catch'] = function (onFail) {\n      return this.then(null, onFail);\n    };\n\n    // TODO: add support for Promise.catch(Error, callback)\n    // TODO: add support for Promise.catch(Error, Error, callback)\n\n    /**\n     * Execute given callback when the promise either resolves or rejects.\n     * @template TT\n     * @param {() => Promise<TT>} fn\n     * @returns {Promise<TT>} promise\n     */\n    Promise.prototype.always = function (fn) {\n      return this.then(fn, fn);\n    };\n\n    /**\n      * Execute given callback when the promise either resolves or rejects.\n      * Same semantics as Node's Promise.finally()\n      * @param {Function} fn\n      * @returns {Promise} promise\n      */\n    Promise.prototype.finally = function (fn) {\n      var me = this;\n      var final = function final() {\n        return new Promise(function (resolve) {\n          return resolve();\n        }).then(fn).then(function () {\n          return me;\n        });\n      };\n      return this.then(final, final);\n    };\n\n    /**\n     * Create a promise which resolves when all provided promises are resolved,\n     * and fails when any of the promises resolves.\n     * @param {Promise[]} promises\n     * @returns {Promise<any[], any>} promise\n     */\n    Promise.all = function (promises) {\n      return new Promise(function (resolve, reject) {\n        var remaining = promises.length,\n          results = [];\n        if (remaining) {\n          promises.forEach(function (p, i) {\n            p.then(function (result) {\n              results[i] = result;\n              remaining--;\n              if (remaining == 0) {\n                resolve(results);\n              }\n            }, function (error) {\n              remaining = 0;\n              reject(error);\n            });\n          });\n        } else {\n          resolve(results);\n        }\n      });\n    };\n\n    /**\n     * Create a promise resolver\n     * @returns {{promise: Promise, resolve: Function, reject: Function}} resolver\n     */\n    Promise.defer = function () {\n      var resolver = {};\n      resolver.promise = new Promise(function (resolve, reject) {\n        resolver.resolve = resolve;\n        resolver.reject = reject;\n      });\n      return resolver;\n    };\n\n    /**\n     * Create a cancellation error\n     * @param {String} [message]\n     * @extends Error\n     */\n    function CancellationError(message) {\n      this.message = message || 'promise cancelled';\n      this.stack = new Error().stack;\n    }\n    CancellationError.prototype = new Error();\n    CancellationError.prototype.constructor = Error;\n    CancellationError.prototype.name = 'CancellationError';\n    Promise.CancellationError = CancellationError;\n\n    /**\n     * Create a timeout error\n     * @param {String} [message]\n     * @extends Error\n     */\n    function TimeoutError(message) {\n      this.message = message || 'timeout exceeded';\n      this.stack = new Error().stack;\n    }\n    TimeoutError.prototype = new Error();\n    TimeoutError.prototype.constructor = Error;\n    TimeoutError.prototype.name = 'TimeoutError';\n    Promise.TimeoutError = TimeoutError;\n    _Promise$1.Promise = Promise;\n    return _Promise$1;\n  }\n\n  function _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n    return n;\n  }\n  function _createForOfIteratorHelper(r, e) {\n    var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (!t) {\n      if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {\n        t && (r = t);\n        var n = 0,\n          F = function () {};\n        return {\n          s: F,\n          n: function () {\n            return n >= r.length ? {\n              done: !0\n            } : {\n              done: !1,\n              value: r[n++]\n            };\n          },\n          e: function (r) {\n            throw r;\n          },\n          f: F\n        };\n      }\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var o,\n      a = !0,\n      u = !1;\n    return {\n      s: function () {\n        t = t.call(r);\n      },\n      n: function () {\n        var r = t.next();\n        return a = r.done, r;\n      },\n      e: function (r) {\n        u = !0, o = r;\n      },\n      f: function () {\n        try {\n          a || null == t.return || t.return();\n        } finally {\n          if (u) throw o;\n        }\n      }\n    };\n  }\n  function _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n      value: t,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[r] = t, e;\n  }\n  function ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n      var o = Object.getOwnPropertySymbols(e);\n      r && (o = o.filter(function (r) {\n        return Object.getOwnPropertyDescriptor(e, r).enumerable;\n      })), t.push.apply(t, o);\n    }\n    return t;\n  }\n  function _objectSpread2(e) {\n    for (var r = 1; r < arguments.length; r++) {\n      var t = null != arguments[r] ? arguments[r] : {};\n      r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n        _defineProperty(e, r, t[r]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n      });\n    }\n    return e;\n  }\n  function _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n      var i = e.call(t, r || \"default\");\n      if (\"object\" != typeof i) return i;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n  }\n  function _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n  }\n  function _typeof(o) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n      return typeof o;\n    } : function (o) {\n      return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n  }\n  function _unsupportedIterableToArray(r, a) {\n    if (r) {\n      if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n      var t = {}.toString.call(r).slice(8, -1);\n      return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n  }\n\n  var WorkerHandler = {exports: {}};\n\n  var validateOptions = {};\n\n  /**\n   * Validate that the object only contains known option names\n   * - Throws an error when unknown options are detected\n   * - Throws an error when some of the allowed options are attached\n   * @param {Object | undefined} options\n   * @param {string[]} allowedOptionNames\n   * @param {string} objectName\n   * @retrun {Object} Returns the original options\n   */\n  var hasRequiredValidateOptions;\n  function requireValidateOptions() {\n    if (hasRequiredValidateOptions) return validateOptions;\n    hasRequiredValidateOptions = 1;\n    validateOptions.validateOptions = function validateOptions(options, allowedOptionNames, objectName) {\n      if (!options) {\n        return;\n      }\n      var optionNames = options ? Object.keys(options) : [];\n\n      // check for unknown properties\n      var unknownOptionName = optionNames.find(function (optionName) {\n        return !allowedOptionNames.includes(optionName);\n      });\n      if (unknownOptionName) {\n        throw new Error('Object \"' + objectName + '\" contains an unknown option \"' + unknownOptionName + '\"');\n      }\n\n      // check for inherited properties which are not present on the object itself\n      var illegalOptionName = allowedOptionNames.find(function (allowedOptionName) {\n        return Object.prototype[allowedOptionName] && !optionNames.includes(allowedOptionName);\n      });\n      if (illegalOptionName) {\n        throw new Error('Object \"' + objectName + '\" contains an inherited option \"' + illegalOptionName + '\" which is ' + 'not defined in the object itself but in its prototype. Only plain objects are allowed. ' + 'Please remove the option from the prototype or override it with a value \"undefined\".');\n      }\n      return options;\n    };\n\n    // source: https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker\n    validateOptions.workerOptsNames = ['credentials', 'name', 'type'];\n\n    // source: https://nodejs.org/api/child_process.html#child_processforkmodulepath-args-options\n    validateOptions.forkOptsNames = ['cwd', 'detached', 'env', 'execPath', 'execArgv', 'gid', 'serialization', 'signal', 'killSignal', 'silent', 'stdio', 'uid', 'windowsVerbatimArguments', 'timeout'];\n\n    // source: https://nodejs.org/api/worker_threads.html#new-workerfilename-options\n    validateOptions.workerThreadOptsNames = ['argv', 'env', 'eval', 'execArgv', 'stdin', 'stdout', 'stderr', 'workerData', 'trackUnmanagedFds', 'transferList', 'resourceLimits', 'name'];\n    return validateOptions;\n  }\n\n  /**\n   * embeddedWorker.js contains an embedded version of worker.js.\n   * This file is automatically generated,\n   * changes made in this file will be overwritten.\n   */\n  var embeddedWorker;\n  var hasRequiredEmbeddedWorker;\n  function requireEmbeddedWorker() {\n    if (hasRequiredEmbeddedWorker) return embeddedWorker;\n    hasRequiredEmbeddedWorker = 1;\n    embeddedWorker = \"!function(e,n){\\\"object\\\"==typeof exports&&\\\"undefined\\\"!=typeof module?module.exports=n():\\\"function\\\"==typeof define&&define.amd?define(n):(e=\\\"undefined\\\"!=typeof globalThis?globalThis:e||self).worker=n()}(this,(function(){\\\"use strict\\\";function e(n){return e=\\\"function\\\"==typeof Symbol&&\\\"symbol\\\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\\\"function\\\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\\\"symbol\\\":typeof e},e(n)}function n(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\\\"default\\\")?e.default:e}var t={};var r=function(e,n){this.message=e,this.transfer=n},o={};function i(e,n){var t=this;if(!(this instanceof i))throw new SyntaxError(\\\"Constructor must be called with the new operator\\\");if(\\\"function\\\"!=typeof e)throw new SyntaxError(\\\"Function parameter handler(resolve, reject) missing\\\");var r=[],o=[];this.resolved=!1,this.rejected=!1,this.pending=!0;var a=function(e,n){r.push(e),o.push(n)};this.then=function(e,n){return new i((function(t,r){var o=e?u(e,t,r):t,i=n?u(n,t,r):r;a(o,i)}),t)};var f=function(e){return t.resolved=!0,t.rejected=!1,t.pending=!1,r.forEach((function(n){n(e)})),a=function(n,t){n(e)},f=d=function(){},t},d=function(e){return t.resolved=!1,t.rejected=!0,t.pending=!1,o.forEach((function(n){n(e)})),a=function(n,t){t(e)},f=d=function(){},t};this.cancel=function(){return n?n.cancel():d(new s),t},this.timeout=function(e){if(n)n.timeout(e);else{var r=setTimeout((function(){d(new c(\\\"Promise timed out after \\\"+e+\\\" ms\\\"))}),e);t.always((function(){clearTimeout(r)}))}return t},e((function(e){f(e)}),(function(e){d(e)}))}function u(e,n,t){return function(r){try{var o=e(r);o&&\\\"function\\\"==typeof o.then&&\\\"function\\\"==typeof o.catch?o.then(n,t):n(o)}catch(e){t(e)}}}function s(e){this.message=e||\\\"promise cancelled\\\",this.stack=(new Error).stack}function c(e){this.message=e||\\\"timeout exceeded\\\",this.stack=(new Error).stack}return i.prototype.catch=function(e){return this.then(null,e)},i.prototype.always=function(e){return this.then(e,e)},i.prototype.finally=function(e){var n=this,t=function(){return new i((function(e){return e()})).then(e).then((function(){return n}))};return this.then(t,t)},i.all=function(e){return new i((function(n,t){var r=e.length,o=[];r?e.forEach((function(e,i){e.then((function(e){o[i]=e,0==--r&&n(o)}),(function(e){r=0,t(e)}))})):n(o)}))},i.defer=function(){var e={};return e.promise=new i((function(n,t){e.resolve=n,e.reject=t})),e},s.prototype=new Error,s.prototype.constructor=Error,s.prototype.name=\\\"CancellationError\\\",i.CancellationError=s,c.prototype=new Error,c.prototype.constructor=Error,c.prototype.name=\\\"TimeoutError\\\",i.TimeoutError=c,o.Promise=i,function(n){var t=r,i=o.Promise,u=\\\"__workerpool-cleanup__\\\",s={exit:function(){}},c={addAbortListener:function(e){s.abortListeners.push(e)},emit:s.emit};if(\\\"undefined\\\"!=typeof self&&\\\"function\\\"==typeof postMessage&&\\\"function\\\"==typeof addEventListener)s.on=function(e,n){addEventListener(e,(function(e){n(e.data)}))},s.send=function(e,n){n?postMessage(e,n):postMessage(e)};else{if(\\\"undefined\\\"==typeof process)throw new Error(\\\"Script must be executed as a worker\\\");var a;try{a=require(\\\"worker_threads\\\")}catch(n){if(\\\"object\\\"!==e(n)||null===n||\\\"MODULE_NOT_FOUND\\\"!==n.code)throw n}if(a&&null!==a.parentPort){var f=a.parentPort;s.send=f.postMessage.bind(f),s.on=f.on.bind(f),s.exit=process.exit.bind(process)}else s.on=process.on.bind(process),s.send=function(e){process.send(e)},s.on(\\\"disconnect\\\",(function(){process.exit(1)})),s.exit=process.exit.bind(process)}function d(e){return Object.getOwnPropertyNames(e).reduce((function(n,t){return Object.defineProperty(n,t,{value:e[t],enumerable:!0})}),{})}function l(e){return e&&\\\"function\\\"==typeof e.then&&\\\"function\\\"==typeof e.catch}s.methods={},s.methods.run=function(e,n){var t=new Function(\\\"return (\\\"+e+\\\").apply(this, arguments);\\\");return t.worker=c,t.apply(t,n)},s.methods.methods=function(){return Object.keys(s.methods)},s.terminationHandler=void 0,s.abortListenerTimeout=1e3,s.abortListeners=[],s.terminateAndExit=function(e){var n=function(){s.exit(e)};if(!s.terminationHandler)return n();var t=s.terminationHandler(e);return l(t)?(t.then(n,n),t):(n(),new i((function(e,n){n(new Error(\\\"Worker terminating\\\"))})))},s.cleanup=function(e){if(!s.abortListeners.length)return s.send({id:e,method:u,error:d(new Error(\\\"Worker terminating\\\"))}),new i((function(e){e()}));var n,t=s.abortListeners.map((function(e){return e()})),r=new i((function(e,t){n=setTimeout((function(){t(new Error(\\\"Timeout occured waiting for abort handler, killing worker\\\"))}),s.abortListenerTimeout)})),o=i.all(t).then((function(){clearTimeout(n),s.abortListeners.length||(s.abortListeners=[])}),(function(){clearTimeout(n),s.exit()}));return i.all([o,r]).then((function(){s.send({id:e,method:u,error:null})}),(function(n){s.send({id:e,method:u,error:n?d(n):null})}))};var p=null;s.on(\\\"message\\\",(function(e){if(\\\"__workerpool-terminate__\\\"===e)return s.terminateAndExit(0);if(e.method===u)return s.cleanup(e.id);try{var n=s.methods[e.method];if(!n)throw new Error('Unknown method \\\"'+e.method+'\\\"');p=e.id;var r=n.apply(n,e.params);l(r)?r.then((function(n){n instanceof t?s.send({id:e.id,result:n.message,error:null},n.transfer):s.send({id:e.id,result:n,error:null}),p=null})).catch((function(n){s.send({id:e.id,result:null,error:d(n)}),p=null})):(r instanceof t?s.send({id:e.id,result:r.message,error:null},r.transfer):s.send({id:e.id,result:r,error:null}),p=null)}catch(n){s.send({id:e.id,result:null,error:d(n)})}})),s.register=function(e,n){if(e)for(var t in e)e.hasOwnProperty(t)&&(s.methods[t]=e[t],s.methods[t].worker=c);n&&(s.terminationHandler=n.onTerminate,s.abortListenerTimeout=n.abortListenerTimeout||1e3),s.send(\\\"ready\\\")},s.emit=function(e){if(p){if(e instanceof t)return void s.send({id:p,isEvent:!0,payload:e.message},e.transfer);s.send({id:p,isEvent:!0,payload:e})}},n.add=s.register,n.emit=s.emit}(t),n(t)}));\\n//# sourceMappingURL=worker.min.js.map\\n\";\n    return embeddedWorker;\n  }\n\n  var hasRequiredWorkerHandler;\n  function requireWorkerHandler() {\n    if (hasRequiredWorkerHandler) return WorkerHandler.exports;\n    hasRequiredWorkerHandler = 1;\n    var _require$$ = require_Promise(),\n      Promise = _require$$.Promise;\n    var environment = environmentExports;\n    var _require$$2 = requireValidateOptions(),\n      validateOptions = _require$$2.validateOptions,\n      forkOptsNames = _require$$2.forkOptsNames,\n      workerThreadOptsNames = _require$$2.workerThreadOptsNames,\n      workerOptsNames = _require$$2.workerOptsNames;\n\n    /**\n     * Special message sent by parent which causes a child process worker to terminate itself.\n     * Not a \"message object\"; this string is the entire message.\n     */\n    var TERMINATE_METHOD_ID = '__workerpool-terminate__';\n\n    /**\n     * Special message by parent which causes a child process worker to perform cleaup\n     * steps before determining if the child process worker should be terminated.\n     */\n    var CLEANUP_METHOD_ID = '__workerpool-cleanup__';\n    function ensureWorkerThreads() {\n      var WorkerThreads = tryRequireWorkerThreads();\n      if (!WorkerThreads) {\n        throw new Error('WorkerPool: workerType = \\'thread\\' is not supported, Node >= 11.7.0 required');\n      }\n      return WorkerThreads;\n    }\n\n    // check whether Worker is supported by the browser\n    function ensureWebWorker() {\n      // Workaround for a bug in PhantomJS (Or QtWebkit): https://github.com/ariya/phantomjs/issues/14534\n      if (typeof Worker !== 'function' && ((typeof Worker === \"undefined\" ? \"undefined\" : _typeof(Worker)) !== 'object' || typeof Worker.prototype.constructor !== 'function')) {\n        throw new Error('WorkerPool: Web Workers not supported');\n      }\n    }\n    function tryRequireWorkerThreads() {\n      try {\n        return require('worker_threads');\n      } catch (error) {\n        if (_typeof(error) === 'object' && error !== null && error.code === 'MODULE_NOT_FOUND') {\n          // no worker_threads available (old version of node.js)\n          return null;\n        } else {\n          throw error;\n        }\n      }\n    }\n\n    // get the default worker script\n    function getDefaultWorker() {\n      if (environment.platform === 'browser') {\n        // test whether the browser supports all features that we need\n        if (typeof Blob === 'undefined') {\n          throw new Error('Blob not supported by the browser');\n        }\n        if (!window.URL || typeof window.URL.createObjectURL !== 'function') {\n          throw new Error('URL.createObjectURL not supported by the browser');\n        }\n\n        // use embedded worker.js\n        var blob = new Blob([requireEmbeddedWorker()], {\n          type: 'text/javascript'\n        });\n        return window.URL.createObjectURL(blob);\n      } else {\n        // use external worker.js in current directory\n        return __dirname + '/worker.js';\n      }\n    }\n    function setupWorker(script, options) {\n      if (options.workerType === 'web') {\n        // browser only\n        ensureWebWorker();\n        return setupBrowserWorker(script, options.workerOpts, Worker);\n      } else if (options.workerType === 'thread') {\n        // node.js only\n        WorkerThreads = ensureWorkerThreads();\n        return setupWorkerThreadWorker(script, WorkerThreads, options);\n      } else if (options.workerType === 'process' || !options.workerType) {\n        // node.js only\n        return setupProcessWorker(script, resolveForkOptions(options), require('child_process'));\n      } else {\n        // options.workerType === 'auto' or undefined\n        if (environment.platform === 'browser') {\n          ensureWebWorker();\n          return setupBrowserWorker(script, options.workerOpts, Worker);\n        } else {\n          // environment.platform === 'node'\n          var WorkerThreads = tryRequireWorkerThreads();\n          if (WorkerThreads) {\n            return setupWorkerThreadWorker(script, WorkerThreads, options);\n          } else {\n            return setupProcessWorker(script, resolveForkOptions(options), require('child_process'));\n          }\n        }\n      }\n    }\n    function setupBrowserWorker(script, workerOpts, Worker) {\n      // validate the options right before creating the worker (not when creating the pool)\n      validateOptions(workerOpts, workerOptsNames, 'workerOpts');\n\n      // create the web worker\n      var worker = new Worker(script, workerOpts);\n      worker.isBrowserWorker = true;\n      // add node.js API to the web worker\n      worker.on = function (event, callback) {\n        this.addEventListener(event, function (message) {\n          callback(message.data);\n        });\n      };\n      worker.send = function (message, transfer) {\n        this.postMessage(message, transfer);\n      };\n      return worker;\n    }\n    function setupWorkerThreadWorker(script, WorkerThreads, options) {\n      var _options$emitStdStrea, _options$emitStdStrea2;\n      // validate the options right before creating the worker thread (not when creating the pool)\n      validateOptions(options === null || options === void 0 ? void 0 : options.workerThreadOpts, workerThreadOptsNames, 'workerThreadOpts');\n      var worker = new WorkerThreads.Worker(script, _objectSpread2({\n        stdout: (_options$emitStdStrea = options === null || options === void 0 ? void 0 : options.emitStdStreams) !== null && _options$emitStdStrea !== void 0 ? _options$emitStdStrea : false,\n        // pipe worker.STDOUT to process.STDOUT if not requested\n        stderr: (_options$emitStdStrea2 = options === null || options === void 0 ? void 0 : options.emitStdStreams) !== null && _options$emitStdStrea2 !== void 0 ? _options$emitStdStrea2 : false\n      }, options === null || options === void 0 ? void 0 : options.workerThreadOpts));\n      worker.isWorkerThread = true;\n      worker.send = function (message, transfer) {\n        this.postMessage(message, transfer);\n      };\n      worker.kill = function () {\n        this.terminate();\n        return true;\n      };\n      worker.disconnect = function () {\n        this.terminate();\n      };\n      if (options !== null && options !== void 0 && options.emitStdStreams) {\n        worker.stdout.on('data', function (data) {\n          return worker.emit(\"stdout\", data);\n        });\n        worker.stderr.on('data', function (data) {\n          return worker.emit(\"stderr\", data);\n        });\n      }\n      return worker;\n    }\n    function setupProcessWorker(script, options, child_process) {\n      // validate the options right before creating the child process (not when creating the pool)\n      validateOptions(options.forkOpts, forkOptsNames, 'forkOpts');\n\n      // no WorkerThreads, fallback to sub-process based workers\n      var worker = child_process.fork(script, options.forkArgs, options.forkOpts);\n\n      // ignore transfer argument since it is not supported by process\n      var send = worker.send;\n      worker.send = function (message) {\n        return send.call(worker, message);\n      };\n      if (options.emitStdStreams) {\n        worker.stdout.on('data', function (data) {\n          return worker.emit(\"stdout\", data);\n        });\n        worker.stderr.on('data', function (data) {\n          return worker.emit(\"stderr\", data);\n        });\n      }\n      worker.isChildProcess = true;\n      return worker;\n    }\n\n    // add debug flags to child processes if the node inspector is active\n    function resolveForkOptions(opts) {\n      opts = opts || {};\n      var processExecArgv = process.execArgv.join(' ');\n      var inspectorActive = processExecArgv.indexOf('--inspect') !== -1;\n      var debugBrk = processExecArgv.indexOf('--debug-brk') !== -1;\n      var execArgv = [];\n      if (inspectorActive) {\n        execArgv.push('--inspect=' + opts.debugPort);\n        if (debugBrk) {\n          execArgv.push('--debug-brk');\n        }\n      }\n      process.execArgv.forEach(function (arg) {\n        if (arg.indexOf('--max-old-space-size') > -1) {\n          execArgv.push(arg);\n        }\n      });\n      return Object.assign({}, opts, {\n        forkArgs: opts.forkArgs,\n        forkOpts: Object.assign({}, opts.forkOpts, {\n          execArgv: (opts.forkOpts && opts.forkOpts.execArgv || []).concat(execArgv),\n          stdio: opts.emitStdStreams ? \"pipe\" : undefined\n        })\n      });\n    }\n\n    /**\n     * Converts a serialized error to Error\n     * @param {Object} obj Error that has been serialized and parsed to object\n     * @return {Error} The equivalent Error.\n     */\n    function objectToError(obj) {\n      var temp = new Error('');\n      var props = Object.keys(obj);\n      for (var i = 0; i < props.length; i++) {\n        temp[props[i]] = obj[props[i]];\n      }\n      return temp;\n    }\n    function handleEmittedStdPayload(handler, payload) {\n      // TODO: refactor if parallel task execution gets added\n      if (Object.keys(handler.processing).length !== 1) {\n        return;\n      }\n      var task = Object.values(handler.processing)[0];\n      if (task.options && typeof task.options.on === 'function') {\n        task.options.on(payload);\n      }\n    }\n\n    /**\n     * A WorkerHandler controls a single worker. This worker can be a child process\n     * on node.js or a WebWorker in a browser environment.\n     * @param {String} [script] If no script is provided, a default worker with a\n     *                          function run will be created.\n     * @param {import('./types.js').WorkerPoolOptions} [_options] See docs\n     * @constructor\n     */\n    function WorkerHandler$1(script, _options) {\n      var me = this;\n      var options = _options || {};\n      this.script = script || getDefaultWorker();\n      this.worker = setupWorker(this.script, options);\n      this.debugPort = options.debugPort;\n      this.forkOpts = options.forkOpts;\n      this.forkArgs = options.forkArgs;\n      this.workerOpts = options.workerOpts;\n      this.workerThreadOpts = options.workerThreadOpts;\n      this.workerTerminateTimeout = options.workerTerminateTimeout;\n\n      // The ready message is only sent if the worker.add method is called (And the default script is not used)\n      if (!script) {\n        this.worker.ready = true;\n      }\n\n      // queue for requests that are received before the worker is ready\n      this.requestQueue = [];\n      this.worker.on(\"stdout\", function (data) {\n        handleEmittedStdPayload(me, {\n          \"stdout\": data.toString()\n        });\n      });\n      this.worker.on(\"stderr\", function (data) {\n        handleEmittedStdPayload(me, {\n          \"stderr\": data.toString()\n        });\n      });\n      this.worker.on('message', function (response) {\n        if (me.terminated) {\n          return;\n        }\n        if (typeof response === 'string' && response === 'ready') {\n          me.worker.ready = true;\n          dispatchQueuedRequests();\n        } else {\n          // find the task from the processing queue, and run the tasks callback\n          var id = response.id;\n          var task = me.processing[id];\n          if (task !== undefined) {\n            if (response.isEvent) {\n              if (task.options && typeof task.options.on === 'function') {\n                task.options.on(response.payload);\n              }\n            } else {\n              // remove the task from the queue\n              delete me.processing[id];\n\n              // test if we need to terminate\n              if (me.terminating === true) {\n                // complete worker termination if all tasks are finished\n                me.terminate();\n              }\n\n              // resolve the task's promise\n              if (response.error) {\n                task.resolver.reject(objectToError(response.error));\n              } else {\n                task.resolver.resolve(response.result);\n              }\n            }\n          }\n          if (response.method === CLEANUP_METHOD_ID) {\n            var trackedTask = me.tracking[response.id];\n            if (trackedTask !== undefined) {\n              if (response.error) {\n                clearTimeout(trackedTask.timeoutId);\n                trackedTask.resolver.reject(objectToError(response.error));\n              } else {\n                me.tracking && clearTimeout(trackedTask.timeoutId);\n                trackedTask.resolver.resolve(trackedTask.result);\n              }\n            }\n            delete me.tracking[id];\n          }\n        }\n      });\n\n      // reject all running tasks on worker error\n      function onError(error) {\n        me.terminated = true;\n        for (var id in me.processing) {\n          if (me.processing[id] !== undefined) {\n            me.processing[id].resolver.reject(error);\n          }\n        }\n        me.processing = Object.create(null);\n      }\n\n      // send all queued requests to worker\n      function dispatchQueuedRequests() {\n        var _iterator = _createForOfIteratorHelper(me.requestQueue.splice(0)),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var request = _step.value;\n            me.worker.send(request.message, request.transfer);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      var worker = this.worker;\n      // listen for worker messages error and exit\n      this.worker.on('error', onError);\n      this.worker.on('exit', function (exitCode, signalCode) {\n        var message = 'Workerpool Worker terminated Unexpectedly\\n';\n        message += '    exitCode: `' + exitCode + '`\\n';\n        message += '    signalCode: `' + signalCode + '`\\n';\n        message += '    workerpool.script: `' + me.script + '`\\n';\n        message += '    spawnArgs: `' + worker.spawnargs + '`\\n';\n        message += '    spawnfile: `' + worker.spawnfile + '`\\n';\n        message += '    stdout: `' + worker.stdout + '`\\n';\n        message += '    stderr: `' + worker.stderr + '`\\n';\n        onError(new Error(message));\n      });\n      this.processing = Object.create(null); // queue with tasks currently in progress\n      this.tracking = Object.create(null); // queue with tasks being monitored for cleanup status\n      this.terminating = false;\n      this.terminated = false;\n      this.cleaning = false;\n      this.terminationHandler = null;\n      this.lastId = 0;\n    }\n\n    /**\n     * Get a list with methods available on the worker.\n     * @return {Promise.<String[], Error>} methods\n     */\n    WorkerHandler$1.prototype.methods = function () {\n      return this.exec('methods');\n    };\n\n    /**\n     * Execute a method with given parameters on the worker\n     * @param {String} method\n     * @param {Array} [params]\n     * @param {{resolve: Function, reject: Function}} [resolver]\n     * @param {import('./types.js').ExecOptions}  [options]\n     * @return {Promise.<*, Error>} result\n     */\n    WorkerHandler$1.prototype.exec = function (method, params, resolver, options) {\n      if (!resolver) {\n        resolver = Promise.defer();\n      }\n\n      // generate a unique id for the task\n      var id = ++this.lastId;\n\n      // register a new task as being in progress\n      this.processing[id] = {\n        id: id,\n        resolver: resolver,\n        options: options\n      };\n\n      // build a JSON-RPC request\n      var request = {\n        message: {\n          id: id,\n          method: method,\n          params: params\n        },\n        transfer: options && options.transfer\n      };\n      if (this.terminated) {\n        resolver.reject(new Error('Worker is terminated'));\n      } else if (this.worker.ready) {\n        // send the request to the worker\n        this.worker.send(request.message, request.transfer);\n      } else {\n        this.requestQueue.push(request);\n      }\n\n      // on cancellation, force the worker to terminate\n      var me = this;\n      return resolver.promise.catch(function (error) {\n        if (error instanceof Promise.CancellationError || error instanceof Promise.TimeoutError) {\n          me.tracking[id] = {\n            id: id,\n            resolver: Promise.defer()\n          };\n\n          // remove this task from the queue. It is already rejected (hence this\n          // catch event), and else it will be rejected again when terminating\n          delete me.processing[id];\n          me.tracking[id].resolver.promise = me.tracking[id].resolver.promise.catch(function (err) {\n            delete me.tracking[id];\n            var promise = me.terminateAndNotify(true).then(function () {\n              throw err;\n            }, function (err) {\n              throw err;\n            });\n            return promise;\n          });\n          me.worker.send({\n            id: id,\n            method: CLEANUP_METHOD_ID\n          });\n\n          /**\n            * Sets a timeout to reject the cleanup operation if the message sent to the worker\n            * does not receive a response. see worker.tryCleanup for worker cleanup operations.\n            * Here we use the workerTerminateTimeout as the worker will be terminated if the timeout does invoke.\n            * \n            * We need this timeout in either case of a Timeout or Cancellation Error as if\n            * the worker does not send a message we still need to give a window of time for a response.\n            * \n            * The workerTermniateTimeout is used here if this promise is rejected the worker cleanup\n            * operations will occure.\n          */\n          me.tracking[id].timeoutId = setTimeout(function () {\n            me.tracking[id].resolver.reject(error);\n          }, me.workerTerminateTimeout);\n          return me.tracking[id].resolver.promise;\n        } else {\n          throw error;\n        }\n      });\n    };\n\n    /**\n     * Test whether the worker is processing any tasks or cleaning up before termination.\n     * @return {boolean} Returns true if the worker is busy\n     */\n    WorkerHandler$1.prototype.busy = function () {\n      return this.cleaning || Object.keys(this.processing).length > 0;\n    };\n\n    /**\n     * Terminate the worker.\n     * @param {boolean} [force=false]   If false (default), the worker is terminated\n     *                                  after finishing all tasks currently in\n     *                                  progress. If true, the worker will be\n     *                                  terminated immediately.\n     * @param {function} [callback=null] If provided, will be called when process terminates.\n     */\n    WorkerHandler$1.prototype.terminate = function (force, callback) {\n      var me = this;\n      if (force) {\n        // cancel all tasks in progress\n        for (var id in this.processing) {\n          if (this.processing[id] !== undefined) {\n            this.processing[id].resolver.reject(new Error('Worker terminated'));\n          }\n        }\n        this.processing = Object.create(null);\n      }\n\n      // If we are terminating, cancel all tracked task for cleanup\n      for (var _i = 0, _Object$values = Object.values(me.tracking); _i < _Object$values.length; _i++) {\n        var task = _Object$values[_i];\n        clearTimeout(task.timeoutId);\n        task.resolver.reject(new Error('Worker Terminating'));\n      }\n      me.tracking = Object.create(null);\n      if (typeof callback === 'function') {\n        this.terminationHandler = callback;\n      }\n      if (!this.busy()) {\n        // all tasks are finished. kill the worker\n        var cleanup = function cleanup(err) {\n          me.terminated = true;\n          me.cleaning = false;\n          if (me.worker != null && me.worker.removeAllListeners) {\n            // removeAllListeners is only available for child_process\n            me.worker.removeAllListeners('message');\n          }\n          me.worker = null;\n          me.terminating = false;\n          if (me.terminationHandler) {\n            me.terminationHandler(err, me);\n          } else if (err) {\n            throw err;\n          }\n        };\n        if (this.worker) {\n          if (typeof this.worker.kill === 'function') {\n            if (this.worker.killed) {\n              cleanup(new Error('worker already killed!'));\n              return;\n            }\n\n            // child process and worker threads\n            var cleanExitTimeout = setTimeout(function () {\n              if (me.worker) {\n                me.worker.kill();\n              }\n            }, this.workerTerminateTimeout);\n            this.worker.once('exit', function () {\n              clearTimeout(cleanExitTimeout);\n              if (me.worker) {\n                me.worker.killed = true;\n              }\n              cleanup();\n            });\n            if (this.worker.ready) {\n              this.worker.send(TERMINATE_METHOD_ID);\n            } else {\n              this.requestQueue.push({\n                message: TERMINATE_METHOD_ID\n              });\n            }\n\n            // mark that the worker is cleaning up resources\n            // to prevent new tasks from being executed\n            this.cleaning = true;\n            return;\n          } else if (typeof this.worker.terminate === 'function') {\n            this.worker.terminate(); // web worker\n            this.worker.killed = true;\n          } else {\n            throw new Error('Failed to terminate worker');\n          }\n        }\n        cleanup();\n      } else {\n        // we can't terminate immediately, there are still tasks being executed\n        this.terminating = true;\n      }\n    };\n\n    /**\n     * Terminate the worker, returning a Promise that resolves when the termination has been done.\n     * @param {boolean} [force=false]   If false (default), the worker is terminated\n     *                                  after finishing all tasks currently in\n     *                                  progress. If true, the worker will be\n     *                                  terminated immediately.\n     * @param {number} [timeout]        If provided and non-zero, worker termination promise will be rejected\n     *                                  after timeout if worker process has not been terminated.\n     * @return {Promise.<WorkerHandler, Error>}\n     */\n    WorkerHandler$1.prototype.terminateAndNotify = function (force, timeout) {\n      var resolver = Promise.defer();\n      if (timeout) {\n        resolver.promise.timeout(timeout);\n      }\n      this.terminate(force, function (err, worker) {\n        if (err) {\n          resolver.reject(err);\n        } else {\n          resolver.resolve(worker);\n        }\n      });\n      return resolver.promise;\n    };\n    WorkerHandler.exports = WorkerHandler$1;\n    WorkerHandler.exports._tryRequireWorkerThreads = tryRequireWorkerThreads;\n    WorkerHandler.exports._setupProcessWorker = setupProcessWorker;\n    WorkerHandler.exports._setupBrowserWorker = setupBrowserWorker;\n    WorkerHandler.exports._setupWorkerThreadWorker = setupWorkerThreadWorker;\n    WorkerHandler.exports.ensureWorkerThreads = ensureWorkerThreads;\n    return WorkerHandler.exports;\n  }\n\n  var debugPortAllocator;\n  var hasRequiredDebugPortAllocator;\n  function requireDebugPortAllocator() {\n    if (hasRequiredDebugPortAllocator) return debugPortAllocator;\n    hasRequiredDebugPortAllocator = 1;\n    var MAX_PORTS = 65535;\n    debugPortAllocator = DebugPortAllocator;\n    function DebugPortAllocator() {\n      this.ports = Object.create(null);\n      this.length = 0;\n    }\n    DebugPortAllocator.prototype.nextAvailableStartingAt = function (starting) {\n      while (this.ports[starting] === true) {\n        starting++;\n      }\n      if (starting >= MAX_PORTS) {\n        throw new Error('WorkerPool debug port limit reached: ' + starting + '>= ' + MAX_PORTS);\n      }\n      this.ports[starting] = true;\n      this.length++;\n      return starting;\n    };\n    DebugPortAllocator.prototype.releasePort = function (port) {\n      delete this.ports[port];\n      this.length--;\n    };\n    return debugPortAllocator;\n  }\n\n  var Pool_1;\n  var hasRequiredPool;\n  function requirePool() {\n    if (hasRequiredPool) return Pool_1;\n    hasRequiredPool = 1;\n    var _require$$ = require_Promise(),\n      Promise = _require$$.Promise;\n    var WorkerHandler = requireWorkerHandler();\n    var environment = environmentExports;\n    var DebugPortAllocator = requireDebugPortAllocator();\n    var DEBUG_PORT_ALLOCATOR = new DebugPortAllocator();\n    /**\n     * A pool to manage workers, which can be created using the function workerpool.pool.\n     *\n     * @param {String} [script]   Optional worker script\n     * @param {import('./types.js').WorkerPoolOptions} [options]  See docs\n     * @constructor\n     */\n    function Pool(script, options) {\n      if (typeof script === 'string') {\n        /** @readonly */\n        this.script = script || null;\n      } else {\n        this.script = null;\n        options = script;\n      }\n\n      /** @private */\n      this.workers = []; // queue with all workers\n      /** @private */\n      this.tasks = []; // queue with tasks awaiting execution\n\n      options = options || {};\n\n      /** @readonly */\n      this.forkArgs = Object.freeze(options.forkArgs || []);\n      /** @readonly */\n      this.forkOpts = Object.freeze(options.forkOpts || {});\n      /** @readonly */\n      this.workerOpts = Object.freeze(options.workerOpts || {});\n      /** @readonly */\n      this.workerThreadOpts = Object.freeze(options.workerThreadOpts || {});\n      /** @private */\n      this.debugPortStart = options.debugPortStart || 43210;\n      /** @readonly @deprecated */\n      this.nodeWorker = options.nodeWorker;\n      /** @readonly\n       * @type {'auto' | 'web' | 'process' | 'thread'}\n       */\n      this.workerType = options.workerType || options.nodeWorker || 'auto';\n      /** @readonly */\n      this.maxQueueSize = options.maxQueueSize || Infinity;\n      /** @readonly */\n      this.workerTerminateTimeout = options.workerTerminateTimeout || 1000;\n\n      /** @readonly */\n      this.onCreateWorker = options.onCreateWorker || function () {\n        return null;\n      };\n      /** @readonly */\n      this.onTerminateWorker = options.onTerminateWorker || function () {\n        return null;\n      };\n\n      /** @readonly */\n      this.emitStdStreams = options.emitStdStreams || false;\n\n      // configuration\n      if (options && 'maxWorkers' in options) {\n        validateMaxWorkers(options.maxWorkers);\n        /** @readonly */\n        this.maxWorkers = options.maxWorkers;\n      } else {\n        this.maxWorkers = Math.max((environment.cpus || 4) - 1, 1);\n      }\n      if (options && 'minWorkers' in options) {\n        if (options.minWorkers === 'max') {\n          /** @readonly */\n          this.minWorkers = this.maxWorkers;\n        } else {\n          validateMinWorkers(options.minWorkers);\n          this.minWorkers = options.minWorkers;\n          this.maxWorkers = Math.max(this.minWorkers, this.maxWorkers); // in case minWorkers is higher than maxWorkers\n        }\n        this._ensureMinWorkers();\n      }\n\n      /** @private */\n      this._boundNext = this._next.bind(this);\n      if (this.workerType === 'thread') {\n        WorkerHandler.ensureWorkerThreads();\n      }\n    }\n\n    /**\n     * Execute a function on a worker.\n     *\n     * Example usage:\n     *\n     *   var pool = new Pool()\n     *\n     *   // call a function available on the worker\n     *   pool.exec('fibonacci', [6])\n     *\n     *   // offload a function\n     *   function add(a, b) {\n     *     return a + b\n     *   };\n     *   pool.exec(add, [2, 4])\n     *       .then(function (result) {\n     *         console.log(result); // outputs 6\n     *       })\n     *       .catch(function(error) {\n     *         console.log(error);\n     *       });\n     * @template { (...args: any[]) => any } T\n     * @param {String | T} method  Function name or function.\n     *                                    If `method` is a string, the corresponding\n     *                                    method on the worker will be executed\n     *                                    If `method` is a Function, the function\n     *                                    will be stringified and executed via the\n     *                                    workers built-in function `run(fn, args)`.\n     * @param {Parameters<T> | null} [params]  Function arguments applied when calling the function\n     * @param {import('./types.js').ExecOptions} [options]  Options\n     * @return {Promise<ReturnType<T>>}\n     */\n    Pool.prototype.exec = function (method, params, options) {\n      // validate type of arguments\n      if (params && !Array.isArray(params)) {\n        throw new TypeError('Array expected as argument \"params\"');\n      }\n      if (typeof method === 'string') {\n        var resolver = Promise.defer();\n        if (this.tasks.length >= this.maxQueueSize) {\n          throw new Error('Max queue size of ' + this.maxQueueSize + ' reached');\n        }\n\n        // add a new task to the queue\n        var tasks = this.tasks;\n        var task = {\n          method: method,\n          params: params,\n          resolver: resolver,\n          timeout: null,\n          options: options\n        };\n        tasks.push(task);\n\n        // replace the timeout method of the Promise with our own,\n        // which starts the timer as soon as the task is actually started\n        var originalTimeout = resolver.promise.timeout;\n        resolver.promise.timeout = function timeout(delay) {\n          if (tasks.indexOf(task) !== -1) {\n            // task is still queued -> start the timer later on\n            task.timeout = delay;\n            return resolver.promise;\n          } else {\n            // task is already being executed -> start timer immediately\n            return originalTimeout.call(resolver.promise, delay);\n          }\n        };\n\n        // trigger task execution\n        this._next();\n        return resolver.promise;\n      } else if (typeof method === 'function') {\n        // send stringified function and function arguments to worker\n        return this.exec('run', [String(method), params], options);\n      } else {\n        throw new TypeError('Function or string expected as argument \"method\"');\n      }\n    };\n\n    /**\n     * Create a proxy for current worker. Returns an object containing all\n     * methods available on the worker. All methods return promises resolving the methods result.\n     * @template { { [k: string]: (...args: any[]) => any } } T\n     * @return {Promise<import('./types.js').Proxy<T>, Error>} Returns a promise which resolves with a proxy object\n     */\n    Pool.prototype.proxy = function () {\n      if (arguments.length > 0) {\n        throw new Error('No arguments expected');\n      }\n      var pool = this;\n      return this.exec('methods').then(function (methods) {\n        var proxy = {};\n        methods.forEach(function (method) {\n          proxy[method] = function () {\n            return pool.exec(method, Array.prototype.slice.call(arguments));\n          };\n        });\n        return proxy;\n      });\n    };\n\n    /**\n     * Creates new array with the results of calling a provided callback function\n     * on every element in this array.\n     * @param {Array} array\n     * @param {function} callback  Function taking two arguments:\n     *                             `callback(currentValue, index)`\n     * @return {Promise.<Array>} Returns a promise which resolves  with an Array\n     *                           containing the results of the callback function\n     *                           executed for each of the array elements.\n     */\n    /* TODO: implement map\n    Pool.prototype.map = function (array, callback) {\n    };\n    */\n\n    /**\n     * Grab the first task from the queue, find a free worker, and assign the\n     * worker to the task.\n     * @private\n     */\n    Pool.prototype._next = function () {\n      if (this.tasks.length > 0) {\n        // there are tasks in the queue\n\n        // find an available worker\n        var worker = this._getWorker();\n        if (worker) {\n          // get the first task from the queue\n          var me = this;\n          var task = this.tasks.shift();\n\n          // check if the task is still pending (and not cancelled -> promise rejected)\n          if (task.resolver.promise.pending) {\n            // send the request to the worker\n            var promise = worker.exec(task.method, task.params, task.resolver, task.options).then(me._boundNext).catch(function () {\n              // if the worker crashed and terminated, remove it from the pool\n              if (worker.terminated) {\n                return me._removeWorker(worker);\n              }\n            }).then(function () {\n              me._next(); // trigger next task in the queue\n            });\n\n            // start queued timer now\n            if (typeof task.timeout === 'number') {\n              promise.timeout(task.timeout);\n            }\n          } else {\n            // The task taken was already complete (either rejected or resolved), so just trigger next task in the queue\n            me._next();\n          }\n        }\n      }\n    };\n\n    /**\n     * Get an available worker. If no worker is available and the maximum number\n     * of workers isn't yet reached, a new worker will be created and returned.\n     * If no worker is available and the maximum number of workers is reached,\n     * null will be returned.\n     *\n     * @return {WorkerHandler | null} worker\n     * @private\n     */\n    Pool.prototype._getWorker = function () {\n      // find a non-busy worker\n      var workers = this.workers;\n      for (var i = 0; i < workers.length; i++) {\n        var worker = workers[i];\n        if (worker.busy() === false) {\n          return worker;\n        }\n      }\n      if (workers.length < this.maxWorkers) {\n        // create a new worker\n        worker = this._createWorkerHandler();\n        workers.push(worker);\n        return worker;\n      }\n      return null;\n    };\n\n    /**\n     * Remove a worker from the pool.\n     * Attempts to terminate worker if not already terminated, and ensures the minimum\n     * pool size is met.\n     * @param {WorkerHandler} worker\n     * @return {Promise<WorkerHandler>}\n     * @private\n     */\n    Pool.prototype._removeWorker = function (worker) {\n      var me = this;\n      DEBUG_PORT_ALLOCATOR.releasePort(worker.debugPort);\n      // _removeWorker will call this, but we need it to be removed synchronously\n      this._removeWorkerFromList(worker);\n      // If minWorkers set, spin up new workers to replace the crashed ones\n      this._ensureMinWorkers();\n      // terminate the worker (if not already terminated)\n      return new Promise(function (resolve, reject) {\n        worker.terminate(false, function (err) {\n          me.onTerminateWorker({\n            forkArgs: worker.forkArgs,\n            forkOpts: worker.forkOpts,\n            workerThreadOpts: worker.workerThreadOpts,\n            script: worker.script\n          });\n          if (err) {\n            reject(err);\n          } else {\n            resolve(worker);\n          }\n        });\n      });\n    };\n\n    /**\n     * Remove a worker from the pool list.\n     * @param {WorkerHandler} worker\n     * @private\n     */\n    Pool.prototype._removeWorkerFromList = function (worker) {\n      // remove from the list with workers\n      var index = this.workers.indexOf(worker);\n      if (index !== -1) {\n        this.workers.splice(index, 1);\n      }\n    };\n\n    /**\n     * Close all active workers. Tasks currently being executed will be finished first.\n     * @param {boolean} [force=false]   If false (default), the workers are terminated\n     *                                  after finishing all tasks currently in\n     *                                  progress. If true, the workers will be\n     *                                  terminated immediately.\n     * @param {number} [timeout]        If provided and non-zero, worker termination promise will be rejected\n     *                                  after timeout if worker process has not been terminated.\n     * @return {Promise.<void, Error>}\n     */\n    Pool.prototype.terminate = function (force, timeout) {\n      var me = this;\n\n      // cancel any pending tasks\n      this.tasks.forEach(function (task) {\n        task.resolver.reject(new Error('Pool terminated'));\n      });\n      this.tasks.length = 0;\n      var f = function f(worker) {\n        DEBUG_PORT_ALLOCATOR.releasePort(worker.debugPort);\n        this._removeWorkerFromList(worker);\n      };\n      var removeWorker = f.bind(this);\n      var promises = [];\n      var workers = this.workers.slice();\n      workers.forEach(function (worker) {\n        var termPromise = worker.terminateAndNotify(force, timeout).then(removeWorker).always(function () {\n          me.onTerminateWorker({\n            forkArgs: worker.forkArgs,\n            forkOpts: worker.forkOpts,\n            workerThreadOpts: worker.workerThreadOpts,\n            script: worker.script\n          });\n        });\n        promises.push(termPromise);\n      });\n      return Promise.all(promises);\n    };\n\n    /**\n     * Retrieve statistics on tasks and workers.\n     * @return {{totalWorkers: number, busyWorkers: number, idleWorkers: number, pendingTasks: number, activeTasks: number}} Returns an object with statistics\n     */\n    Pool.prototype.stats = function () {\n      var totalWorkers = this.workers.length;\n      var busyWorkers = this.workers.filter(function (worker) {\n        return worker.busy();\n      }).length;\n      return {\n        totalWorkers: totalWorkers,\n        busyWorkers: busyWorkers,\n        idleWorkers: totalWorkers - busyWorkers,\n        pendingTasks: this.tasks.length,\n        activeTasks: busyWorkers\n      };\n    };\n\n    /**\n     * Ensures that a minimum of minWorkers is up and running\n     * @private\n     */\n    Pool.prototype._ensureMinWorkers = function () {\n      if (this.minWorkers) {\n        for (var i = this.workers.length; i < this.minWorkers; i++) {\n          this.workers.push(this._createWorkerHandler());\n        }\n      }\n    };\n\n    /**\n     * Helper function to create a new WorkerHandler and pass all options.\n     * @return {WorkerHandler}\n     * @private\n     */\n    Pool.prototype._createWorkerHandler = function () {\n      var overriddenParams = this.onCreateWorker({\n        forkArgs: this.forkArgs,\n        forkOpts: this.forkOpts,\n        workerOpts: this.workerOpts,\n        workerThreadOpts: this.workerThreadOpts,\n        script: this.script\n      }) || {};\n      return new WorkerHandler(overriddenParams.script || this.script, {\n        forkArgs: overriddenParams.forkArgs || this.forkArgs,\n        forkOpts: overriddenParams.forkOpts || this.forkOpts,\n        workerOpts: overriddenParams.workerOpts || this.workerOpts,\n        workerThreadOpts: overriddenParams.workerThreadOpts || this.workerThreadOpts,\n        debugPort: DEBUG_PORT_ALLOCATOR.nextAvailableStartingAt(this.debugPortStart),\n        workerType: this.workerType,\n        workerTerminateTimeout: this.workerTerminateTimeout,\n        emitStdStreams: this.emitStdStreams\n      });\n    };\n\n    /**\n     * Ensure that the maxWorkers option is an integer >= 1\n     * @param {*} maxWorkers\n     * @returns {boolean} returns true maxWorkers has a valid value\n     */\n    function validateMaxWorkers(maxWorkers) {\n      if (!isNumber(maxWorkers) || !isInteger(maxWorkers) || maxWorkers < 1) {\n        throw new TypeError('Option maxWorkers must be an integer number >= 1');\n      }\n    }\n\n    /**\n     * Ensure that the minWorkers option is an integer >= 0\n     * @param {*} minWorkers\n     * @returns {boolean} returns true when minWorkers has a valid value\n     */\n    function validateMinWorkers(minWorkers) {\n      if (!isNumber(minWorkers) || !isInteger(minWorkers) || minWorkers < 0) {\n        throw new TypeError('Option minWorkers must be an integer number >= 0');\n      }\n    }\n\n    /**\n     * Test whether a variable is a number\n     * @param {*} value\n     * @returns {boolean} returns true when value is a number\n     */\n    function isNumber(value) {\n      return typeof value === 'number';\n    }\n\n    /**\n     * Test whether a number is an integer\n     * @param {number} value\n     * @returns {boolean} Returns true if value is an integer\n     */\n    function isInteger(value) {\n      return Math.round(value) == value;\n    }\n    Pool_1 = Pool;\n    return Pool_1;\n  }\n\n  var worker$1 = {};\n\n  /**\n   * The helper class for transferring data from the worker to the main thread.\n   *\n   * @param {Object} message The object to deliver to the main thread.\n   * @param {Object[]} transfer An array of transferable Objects to transfer ownership of.\n   */\n  var transfer;\n  var hasRequiredTransfer;\n  function requireTransfer() {\n    if (hasRequiredTransfer) return transfer;\n    hasRequiredTransfer = 1;\n    function Transfer(message, transfer) {\n      this.message = message;\n      this.transfer = transfer;\n    }\n    transfer = Transfer;\n    return transfer;\n  }\n\n  var hasRequiredWorker;\n  function requireWorker() {\n    if (hasRequiredWorker) return worker$1;\n    hasRequiredWorker = 1;\n    (function (exports) {\n      var Transfer = requireTransfer();\n\n      /**\n       * worker must handle async cleanup handlers. Use custom Promise implementation. \n      */\n      var Promise = require_Promise().Promise;\n      /**\n       * Special message sent by parent which causes the worker to terminate itself.\n       * Not a \"message object\"; this string is the entire message.\n       */\n      var TERMINATE_METHOD_ID = '__workerpool-terminate__';\n\n      /**\n       * Special message by parent which causes a child process worker to perform cleaup\n       * steps before determining if the child process worker should be terminated.\n      */\n      var CLEANUP_METHOD_ID = '__workerpool-cleanup__';\n      // var nodeOSPlatform = require('./environment').nodeOSPlatform;\n\n      var TIMEOUT_DEFAULT = 1000;\n\n      // create a worker API for sending and receiving messages which works both on\n      // node.js and in the browser\n      var worker = {\n        exit: function exit() {}\n      };\n\n      // api for in worker communication with parent process\n      // works in both node.js and the browser\n      var publicWorker = {\n        /**\n         * \n         * @param {() => Promise<void>} listener \n         */\n        addAbortListener: function addAbortListener(listener) {\n          worker.abortListeners.push(listener);\n        },\n        emit: worker.emit\n      };\n      if (typeof self !== 'undefined' && typeof postMessage === 'function' && typeof addEventListener === 'function') {\n        // worker in the browser\n        worker.on = function (event, callback) {\n          addEventListener(event, function (message) {\n            callback(message.data);\n          });\n        };\n        worker.send = function (message, transfer) {\n          transfer ? postMessage(message, transfer) : postMessage(message);\n        };\n      } else if (typeof process !== 'undefined') {\n        // node.js\n\n        var WorkerThreads;\n        try {\n          WorkerThreads = require('worker_threads');\n        } catch (error) {\n          if (_typeof(error) === 'object' && error !== null && error.code === 'MODULE_NOT_FOUND') ; else {\n            throw error;\n          }\n        }\n        if (WorkerThreads && /* if there is a parentPort, we are in a WorkerThread */\n        WorkerThreads.parentPort !== null) {\n          var parentPort = WorkerThreads.parentPort;\n          worker.send = parentPort.postMessage.bind(parentPort);\n          worker.on = parentPort.on.bind(parentPort);\n          worker.exit = process.exit.bind(process);\n        } else {\n          worker.on = process.on.bind(process);\n          // ignore transfer argument since it is not supported by process\n          worker.send = function (message) {\n            process.send(message);\n          };\n          // register disconnect handler only for subprocess worker to exit when parent is killed unexpectedly\n          worker.on('disconnect', function () {\n            process.exit(1);\n          });\n          worker.exit = process.exit.bind(process);\n        }\n      } else {\n        throw new Error('Script must be executed as a worker');\n      }\n      function convertError(error) {\n        return Object.getOwnPropertyNames(error).reduce(function (product, name) {\n          return Object.defineProperty(product, name, {\n            value: error[name],\n            enumerable: true\n          });\n        }, {});\n      }\n\n      /**\n       * Test whether a value is a Promise via duck typing.\n       * @param {*} value\n       * @returns {boolean} Returns true when given value is an object\n       *                    having functions `then` and `catch`.\n       */\n      function isPromise(value) {\n        return value && typeof value.then === 'function' && typeof value.catch === 'function';\n      }\n\n      // functions available externally\n      worker.methods = {};\n\n      /**\n       * Execute a function with provided arguments\n       * @param {String} fn     Stringified function\n       * @param {Array} [args]  Function arguments\n       * @returns {*}\n       */\n      worker.methods.run = function run(fn, args) {\n        var f = new Function('return (' + fn + ').apply(this, arguments);');\n        f.worker = publicWorker;\n        return f.apply(f, args);\n      };\n\n      /**\n       * Get a list with methods available on this worker\n       * @return {String[]} methods\n       */\n      worker.methods.methods = function methods() {\n        return Object.keys(worker.methods);\n      };\n\n      /**\n       * Custom handler for when the worker is terminated.\n       */\n      worker.terminationHandler = undefined;\n      worker.abortListenerTimeout = TIMEOUT_DEFAULT;\n\n      /**\n       * Abort handlers for resolving errors which may cause a timeout or cancellation\n       * to occur from a worker context\n       */\n      worker.abortListeners = [];\n\n      /**\n       * Cleanup and exit the worker.\n       * @param {Number} code \n       * @returns {Promise<void>}\n       */\n      worker.terminateAndExit = function (code) {\n        var _exit = function _exit() {\n          worker.exit(code);\n        };\n        if (!worker.terminationHandler) {\n          return _exit();\n        }\n        var result = worker.terminationHandler(code);\n        if (isPromise(result)) {\n          result.then(_exit, _exit);\n          return result;\n        } else {\n          _exit();\n          return new Promise(function (_resolve, reject) {\n            reject(new Error(\"Worker terminating\"));\n          });\n        }\n      };\n\n      /**\n        * Called within the worker message handler to run abort handlers if registered to perform cleanup operations.\n        * @param {Integer} [requestId] id of task which is currently executing in the worker\n        * @return {Promise<void>}\n      */\n      worker.cleanup = function (requestId) {\n        if (!worker.abortListeners.length) {\n          worker.send({\n            id: requestId,\n            method: CLEANUP_METHOD_ID,\n            error: convertError(new Error('Worker terminating'))\n          });\n\n          // If there are no handlers registered, reject the promise with an error as we want the handler to be notified\n          // that cleanup should begin and the handler should be GCed.\n          return new Promise(function (resolve) {\n            resolve();\n          });\n        }\n        var _exit = function _exit() {\n          worker.exit();\n        };\n        var _abort = function _abort() {\n          if (!worker.abortListeners.length) {\n            worker.abortListeners = [];\n          }\n        };\n        var promises = worker.abortListeners.map(function (listener) {\n          return listener();\n        });\n        var timerId;\n        var timeoutPromise = new Promise(function (_resolve, reject) {\n          timerId = setTimeout(function () {\n            reject(new Error('Timeout occured waiting for abort handler, killing worker'));\n          }, worker.abortListenerTimeout);\n        });\n\n        // Once a promise settles we need to clear the timeout to prevet fulfulling the promise twice \n        var settlePromise = Promise.all(promises).then(function () {\n          clearTimeout(timerId);\n          _abort();\n        }, function () {\n          clearTimeout(timerId);\n          _exit();\n        });\n\n        // Returns a promise which will result in one of the following cases\n        // - Resolve once all handlers resolve\n        // - Reject if one or more handlers exceed the 'abortListenerTimeout' interval\n        // - Reject if one or more handlers reject\n        // Upon one of the above cases a message will be sent to the handler with the result of the handler execution\n        // which will either kill the worker if the result contains an error, or \n        return Promise.all([settlePromise, timeoutPromise]).then(function () {\n          worker.send({\n            id: requestId,\n            method: CLEANUP_METHOD_ID,\n            error: null\n          });\n        }, function (err) {\n          worker.send({\n            id: requestId,\n            method: CLEANUP_METHOD_ID,\n            error: err ? convertError(err) : null\n          });\n        });\n      };\n      var currentRequestId = null;\n      worker.on('message', function (request) {\n        if (request === TERMINATE_METHOD_ID) {\n          return worker.terminateAndExit(0);\n        }\n        if (request.method === CLEANUP_METHOD_ID) {\n          return worker.cleanup(request.id);\n        }\n        try {\n          var method = worker.methods[request.method];\n          if (method) {\n            currentRequestId = request.id;\n\n            // execute the function\n            var result = method.apply(method, request.params);\n            if (isPromise(result)) {\n              // promise returned, resolve this and then return\n              result.then(function (result) {\n                if (result instanceof Transfer) {\n                  worker.send({\n                    id: request.id,\n                    result: result.message,\n                    error: null\n                  }, result.transfer);\n                } else {\n                  worker.send({\n                    id: request.id,\n                    result: result,\n                    error: null\n                  });\n                }\n                currentRequestId = null;\n              }).catch(function (err) {\n                worker.send({\n                  id: request.id,\n                  result: null,\n                  error: convertError(err)\n                });\n                currentRequestId = null;\n              });\n            } else {\n              // immediate result\n              if (result instanceof Transfer) {\n                worker.send({\n                  id: request.id,\n                  result: result.message,\n                  error: null\n                }, result.transfer);\n              } else {\n                worker.send({\n                  id: request.id,\n                  result: result,\n                  error: null\n                });\n              }\n              currentRequestId = null;\n            }\n          } else {\n            throw new Error('Unknown method \"' + request.method + '\"');\n          }\n        } catch (err) {\n          worker.send({\n            id: request.id,\n            result: null,\n            error: convertError(err)\n          });\n        }\n      });\n\n      /**\n       * Register methods to the worker\n       * @param {Object} [methods]\n       * @param {import('./types.js').WorkerRegisterOptions} [options]\n       */\n      worker.register = function (methods, options) {\n        if (methods) {\n          for (var name in methods) {\n            if (methods.hasOwnProperty(name)) {\n              worker.methods[name] = methods[name];\n              worker.methods[name].worker = publicWorker;\n            }\n          }\n        }\n        if (options) {\n          worker.terminationHandler = options.onTerminate;\n          // register listener timeout or default to 1 second\n          worker.abortListenerTimeout = options.abortListenerTimeout || TIMEOUT_DEFAULT;\n        }\n        worker.send('ready');\n      };\n      worker.emit = function (payload) {\n        if (currentRequestId) {\n          if (payload instanceof Transfer) {\n            worker.send({\n              id: currentRequestId,\n              isEvent: true,\n              payload: payload.message\n            }, payload.transfer);\n            return;\n          }\n          worker.send({\n            id: currentRequestId,\n            isEvent: true,\n            payload: payload\n          });\n        }\n      };\n      {\n        exports.add = worker.register;\n        exports.emit = worker.emit;\n      }\n    })(worker$1);\n    return worker$1;\n  }\n\n  var platform = environmentExports.platform,\n    isMainThread = environmentExports.isMainThread,\n    cpus = environmentExports.cpus;\n\n  /** @typedef {import(\"./Pool\")} Pool */\n  /** @typedef {import(\"./types.js\").WorkerPoolOptions} WorkerPoolOptions */\n  /** @typedef {import(\"./types.js\").WorkerRegisterOptions} WorkerRegisterOptions */\n\n  /**\n   * @template { { [k: string]: (...args: any[]) => any } } T\n   * @typedef {import('./types.js').Proxy<T>} Proxy<T>\n   */\n\n  /**\n   * @overload\n   * Create a new worker pool\n   * @param {WorkerPoolOptions} [script]\n   * @returns {Pool} pool\n   */\n  /**\n   * @overload\n   * Create a new worker pool\n   * @param {string} [script]\n   * @param {WorkerPoolOptions} [options]\n   * @returns {Pool} pool\n   */\n  function pool(script, options) {\n    var Pool = requirePool();\n    return new Pool(script, options);\n  }\n  var pool_1 = src.pool = pool;\n\n  /**\n   * Create a worker and optionally register a set of methods to the worker.\n   * @param {{ [k: string]: (...args: any[]) => any }} [methods]\n   * @param {WorkerRegisterOptions} [options]\n   */\n  function worker(methods, options) {\n    var worker = requireWorker();\n    worker.add(methods, options);\n  }\n  var worker_1 = src.worker = worker;\n\n  /**\n   * Sends an event to the parent worker pool.\n   * @param {any} payload \n   */\n  function workerEmit(payload) {\n    var worker = requireWorker();\n    worker.emit(payload);\n  }\n  var workerEmit_1 = src.workerEmit = workerEmit;\n  var _require$$ = require_Promise(),\n    Promise$1 = _require$$.Promise;\n  var _Promise = src.Promise = Promise$1;\n  var Transfer = src.Transfer = requireTransfer();\n  var platform_1 = src.platform = platform;\n  var isMainThread_1 = src.isMainThread = isMainThread;\n  var cpus_1 = src.cpus = cpus;\n\n  exports.Promise = _Promise;\n  exports.Transfer = Transfer;\n  exports.cpus = cpus_1;\n  exports.default = src;\n  exports.isMainThread = isMainThread_1;\n  exports.platform = platform_1;\n  exports.pool = pool_1;\n  exports.worker = worker_1;\n  exports.workerEmit = workerEmit_1;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=workerpool.js.map\n","import workerpool from 'workerpool';\r\n\r\nimport { IPlatformAction } from './PlatformAction';\r\n\r\n\r\nexport abstract class ExtensionBase {\r\n  public platformActions: IPlatformAction[] = [];\r\n\r\n\r\n  constructor() {\r\n    workerpool.worker({\r\n      activate: this.activate.bind(this),\r\n      deactivate: this.deactivate.bind(this),\r\n      platformActions: this._platformActions.bind(this),\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Método chamado automaticamente ao ativar a extensão.\r\n   * Pode ser sobrescrito pelas classes derivadas.\r\n   */\r\n  activate(): void {\r\n    console.log('Extensão ativada (método base).');\r\n  }\r\n\r\n  /**\r\n   * Método chamado automaticamente ao desativar a extensão.\r\n   * Pode ser sobrescrito pelas classes derivadas.\r\n   */\r\n  deactivate(): void {\r\n    console.log('Extensão desativada (método base).');\r\n  }\r\n\r\n\r\n  private _platformActions(key: string): void {\r\n    this.platformActions.forEach(platformAction => platformAction.key === key ? platformAction.action() : {});\r\n  }\r\n}\r\n"],"names":["__viteBrowserExternal","global","factory","exports","this","src","environment","module","isNode","nodeProcess","worker_threads","require$$0","require$$1","environmentExports","_Promise$1","hasRequired_Promise","require_Promise","Promise","handler","parent","me","_onSuccess","_onFail","_process","onSuccess","onFail","resolve","reject","s","_then","f","_resolve2","result","fn","_reject2","error","CancellationError","delay","timer","TimeoutError","callback","res","final","promises","remaining","results","p","i","resolver","message","_arrayLikeToArray","r","a","e","n","_createForOfIteratorHelper","t","_unsupportedIterableToArray","F","o","u","_defineProperty","_toPropertyKey","ownKeys","_objectSpread2","_toPrimitive","_typeof","WorkerHandler","validateOptions","hasRequiredValidateOptions","requireValidateOptions","options","allowedOptionNames","objectName","optionNames","unknownOptionName","optionName","illegalOptionName","allowedOptionName","embeddedWorker","hasRequiredEmbeddedWorker","requireEmbeddedWorker","hasRequiredWorkerHandler","requireWorkerHandler","_require$$","_require$$2","forkOptsNames","workerThreadOptsNames","workerOptsNames","TERMINATE_METHOD_ID","CLEANUP_METHOD_ID","ensureWorkerThreads","WorkerThreads","tryRequireWorkerThreads","ensureWebWorker","getDefaultWorker","blob","setupWorker","script","setupBrowserWorker","setupWorkerThreadWorker","setupProcessWorker","resolveForkOptions","require$$2","workerOpts","Worker","worker","event","transfer","_options$emitStdStrea","_options$emitStdStrea2","data","child_process","send","opts","processExecArgv","inspectorActive","debugBrk","execArgv","arg","objectToError","obj","temp","props","handleEmittedStdPayload","payload","task","WorkerHandler$1","_options","response","dispatchQueuedRequests","id","trackedTask","onError","_iterator","_step","request","err","exitCode","signalCode","method","params","promise","force","_i","_Object$values","cleanup","cleanExitTimeout","timeout","debugPortAllocator","hasRequiredDebugPortAllocator","requireDebugPortAllocator","MAX_PORTS","DebugPortAllocator","starting","port","Pool_1","hasRequiredPool","requirePool","DEBUG_PORT_ALLOCATOR","Pool","validateMaxWorkers","validateMinWorkers","tasks","originalTimeout","pool","methods","proxy","workers","index","removeWorker","termPromise","totalWorkers","busyWorkers","overriddenParams","maxWorkers","isNumber","isInteger","minWorkers","value","worker$1","hasRequiredTransfer","requireTransfer","Transfer","hasRequiredWorker","requireWorker","TIMEOUT_DEFAULT","publicWorker","listener","parentPort","convertError","product","name","isPromise","args","code","_exit","_resolve","requestId","_abort","timerId","timeoutPromise","settlePromise","currentRequestId","platform","isMainThread","cpus","pool_1","worker_1","workerEmit","workerEmit_1","Promise$1","_Promise","platform_1","isMainThread_1","cpus_1","ExtensionBase","workerpool","key","platformAction"],"mappings":"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","x_google_ignoreList":[1]}